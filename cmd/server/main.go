package main

import (
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/annel0/mmo-game/internal/api"
	"github.com/annel0/mmo-game/internal/auth"
	"github.com/annel0/mmo-game/internal/logging"
	"github.com/annel0/mmo-game/internal/network"
	"github.com/annel0/mmo-game/internal/world/block"
	"github.com/annel0/mmo-game/internal/world/entity"
)

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API)
	if err := logging.InitDefaultLogger("server"); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: %v", err)
	}
	defer logging.CloseDefaultLogger()

	logging.Info("üéÆ –ó–∞–ø—É—Å–∫ MMO Game Server —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ REST API...")
	logging.Debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

	// === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
	// –ò–≥—Ä–æ–≤—ã–µ –ø–æ—Ä—Ç—ã
	tcpAddr := ":7777"
	udpAddr := ":7778"

	// REST API –ø–æ—Ä—Ç
	restPort := ":8088"

	logging.Info("üì° –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞: TCP=%s, UDP=%s, REST API=%s", tcpAddr, udpAddr, restPort)

	// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—É—â–Ω–æ—Å—Ç–µ–π
	logging.Debug("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π...")
	entityManager := entity.NewEntityManager()
	entityManager.RegisterDefaultBehaviors()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º JSON-–æ–ø–∏—Å–∞–Ω–∏—è –±–ª–æ–∫–æ–≤ (–µ—Å–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
	if err := block.LoadJSONBlocks("assets/blocks"); err != nil && !os.IsNotExist(err) {
		logging.Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON-–±–ª–æ–∫–æ–≤: %v", err)
	}

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è REST API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π MariaDB
	apiConfig := api.IntegrationConfig{
		RestPort: restPort,
		MariaConfig: auth.MariaConfig{
			Host:     "localhost",
			Port:     3306,
			Database: "blockverse",
			Username: "gameuser",    // –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ –≤–∞—à—É –ë–î
			Password: "gamepass123", // –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ –≤–∞—à—É –ë–î
		},
		EntityManager: entityManager,
		UseMariaDB:    false, // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ true –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MariaDB
	}

	// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é REST API
	logging.Debug("–°–æ–∑–¥–∞–Ω–∏–µ REST API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
	apiIntegration, err := api.NewServerIntegration(apiConfig)
	if err != nil {
		logging.Error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è REST API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: %v", err)
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è REST API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: %v", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º REST API —Å–µ—Ä–≤–µ—Ä
	logging.Debug("–ó–∞–ø—É—Å–∫ REST API —Å–µ—Ä–≤–µ—Ä–∞...")
	if err := apiIntegration.Start(); err != nil {
		logging.Error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ REST API: %v", err)
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ REST API: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä
	logging.Debug("–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
	gameServer, err := network.NewGameServerPB(tcpAddr, udpAddr)
	if err != nil {
		logging.Error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–≥—Ä—ã –∏ REST API
	_ = apiIntegration.GetUserRepository() // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
	logging.Info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–≥—Ä—ã –∏ REST API")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä
	logging.Debug("–ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
	gameServer.Start()

	logging.Info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
	logging.Info("   üéÆ –ò–≥—Ä–æ–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫: TCP %s, UDP %s", tcpAddr, udpAddr)
	logging.Info("   üåê REST API: http://localhost%s", restPort)
	logging.Info("   üîê JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
	logging.Info("   ‚ù§Ô∏è  Health check: http://localhost%s/health", restPort)
	logging.Debug("–°–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")

	// –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è REST API
	logging.Info("üí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è REST API:")
	logging.Info("   curl http://localhost%s/health", restPort)
	logging.Info("   curl -X POST http://localhost%s/api/auth/login -H 'Content-Type: application/json' -d '{\"username\":\"admin\",\"password\":\"ChangeMe123!\"}'", restPort)

	// –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –û–°
	sigCh := make(chan os.Signal, 1)
	signal.Notify(sigCh, syscall.SIGINT, syscall.SIGTERM)

	logging.Debug("–û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

	// –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	sig := <-sigCh
	logging.Info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª %v, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...", sig)

	// === GRACEFUL SHUTDOWN ===
	logging.Debug("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä
	logging.Debug("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
	gameServer.Stop()

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º REST API
	logging.Debug("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ REST API...")
	if err := apiIntegration.Stop(); err != nil {
		logging.Error("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ REST API: %v", err)
	}

	logging.Info("üëã –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}
