package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/annel0/mmo-game/internal/api"
	"github.com/annel0/mmo-game/internal/auth"
	"github.com/annel0/mmo-game/internal/config"
	"github.com/annel0/mmo-game/internal/eventbus"
	"github.com/annel0/mmo-game/internal/logging"
	"github.com/annel0/mmo-game/internal/network"
	"github.com/annel0/mmo-game/internal/observability"
	"github.com/annel0/mmo-game/internal/regional"
	"github.com/annel0/mmo-game/internal/sync"
	"github.com/annel0/mmo-game/internal/world"
	"github.com/annel0/mmo-game/internal/world/block"
	"github.com/annel0/mmo-game/internal/world/entity"
)

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API)
	if err := logging.InitDefaultLogger("server"); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: %v", err)
	}
	defer logging.CloseDefaultLogger()

	logging.Info("üéÆ –ó–∞–ø—É—Å–∫ MMO Game Server —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ REST API...")
	logging.Debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

	// === TELEMETRY ===
	shutdownTel, err := observability.InitTelemetry(context.Background(), "mmo_server")
	if err != nil {
		logging.Warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OpenTelemetry: %v", err)
	}

	// === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
	cfg, err := config.Load("")
	if err != nil {
		logging.Warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å config: %v", err)
	}

	// –ü–æ—Ä—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ fallback –Ω–∞ environment variables
	var serverCfg config.ServerConfig
	if cfg != nil {
		serverCfg = cfg.Server
	}

	tcpPort := serverCfg.GetTCPPort()
	udpPort := serverCfg.GetUDPPort()
	restPort := serverCfg.GetRESTPort()
	metricsPort := serverCfg.GetMetricsPort()

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞
	tcpAddr := fmt.Sprintf(":%d", tcpPort)
	udpAddr := fmt.Sprintf(":%d", udpPort)
	restAddr := fmt.Sprintf(":%d", restPort)
	metricsAddr := fmt.Sprintf(":%d", metricsPort)

	// EventBus –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏)
	natsURL := "nats://127.0.0.1:4222"
	streamName := "EVENTS"
	retention := 24
	if cfg != nil {
		if cfg.EventBus.URL != "" {
			natsURL = cfg.EventBus.URL
		}
		if cfg.EventBus.Stream != "" {
			streamName = cfg.EventBus.Stream
		}
		if cfg.EventBus.Retention > 0 {
			retention = cfg.EventBus.Retention
		}
	}

	logging.Info("üì° –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞: TCP=%s, UDP=%s, REST API=%s", tcpAddr, udpAddr, restAddr)

	// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø EVENTBUS ===
	bus, err := eventbus.NewJetStreamBus(natsURL, streamName, time.Duration(retention)*time.Hour)
	if err != nil {
		logging.Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å JetStreamBus: %v", err)
		log.Fatalf("EventBus init failed: %v", err)
	}

	eventbus.Init(bus)
	logging.Info("‚úÖ JetStreamBus –ø–æ–¥–∫–ª—é—á—ë–Ω %s", natsURL)

	// –ó–∞–ø—É—Å–∫–∞–µ–º internal listener –∏ Prometheus metrics
	if err := eventbus.StartLoggingListener(bus); err != nil {
		logging.Warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å LoggingListener: %v", err)
	}

	exporter := eventbus.NewMetricsExporter(bus)
	exporter.StartHTTP(metricsAddr)

	// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SYNC ===
	syncCfg := sync.SyncConfig{
		RegionID:     "region-eu-west",
		Bus:          bus,
		BatchSize:    100,
		FlushEvery:   3 * time.Second,
		UseGzipCompr: true,
	}
	if cfg != nil && cfg.Sync.RegionID != "" {
		syncCfg.RegionID = cfg.Sync.RegionID
		if cfg.Sync.BatchSize > 0 {
			syncCfg.BatchSize = cfg.Sync.BatchSize
		}
		if cfg.Sync.FlushEvery > 0 {
			syncCfg.FlushEvery = time.Duration(cfg.Sync.FlushEvery) * time.Second
		}
		syncCfg.UseGzipCompr = cfg.Sync.UseGzipCompr
	}

	syncManager, err := sync.NewSyncManager(syncCfg)
	if err != nil {
		logging.Warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SyncManager: %v", err)
	}

	// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø REGIONAL NODE ===
	// –°–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏—Ä –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–∑–ª–∞
	localWorld := world.NewWorldManager(time.Now().Unix()) // –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp –∫–∞–∫ seed

	// –ü–æ–ª—É—á–∞–µ–º BatchManager –∏–∑ SyncManager
	var batchManager *sync.BatchManager
	if syncManager != nil {
		// TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ GetBatchManager –≤ SyncManager
		// –ü–æ–∫–∞ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π BatchManager –Ω–∞–ø—Ä—è–º—É—é
		batchManager = sync.NewBatchManager(bus, syncCfg.RegionID, syncCfg.BatchSize, syncCfg.FlushEvery, nil)
	}

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–∑–ª–∞
	regionalCfg := regional.NodeConfig{
		RegionID:     syncCfg.RegionID,
		WorldManager: localWorld,
		EventBus:     bus,
		BatchManager: batchManager,
		Resolver:     nil, // –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω LWWResolver –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	// –°–æ–∑–¥–∞—ë–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —É–∑–µ–ª
	regionalNode, err := regional.NewRegionalNode(regionalCfg)
	if err != nil {
		logging.Warn("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å RegionalNode: %v", err)
	} else {
		// –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —É–∑–µ–ª
		if err := regionalNode.Start(context.Background()); err != nil {
			logging.Warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å RegionalNode: %v", err)
		} else {
			logging.Info("‚úÖ RegionalNode %s –∑–∞–ø—É—â–µ–Ω", syncCfg.RegionID)
		}
	}

	// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—É—â–Ω–æ—Å—Ç–µ–π
	logging.Debug("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π...")
	entityManager := entity.NewEntityManager()
	entityManager.RegisterDefaultBehaviors()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º JSON-–æ–ø–∏—Å–∞–Ω–∏—è –±–ª–æ–∫–æ–≤ (–µ—Å–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
	if err := block.LoadJSONBlocks("assets/blocks"); err != nil && !os.IsNotExist(err) {
		logging.Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON-–±–ª–æ–∫–æ–≤: %v", err)
	}

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è REST API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π MariaDB
	apiConfig := api.IntegrationConfig{
		RestPort: restAddr,
		MariaConfig: auth.MariaConfig{
			Host:     "localhost",
			Port:     3306,
			Database: "blockverse",
			Username: "gameuser",    // –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ –≤–∞—à—É –ë–î
			Password: "gamepass123", // –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ –≤–∞—à—É –ë–î
		},
		EntityManager: entityManager,
		UseMariaDB:    false, // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ true –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MariaDB

		// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–∑–∏—Ü–∏–π –∏–≥—Ä–æ–∫–æ–≤
		PositionStorage: api.PositionStorageConfig{
			Type:             "memory", // "memory" –∏–ª–∏ "mariadb"
			MariaDBDSN:       "gameuser:gamepass123@tcp(localhost:3306)/blockverse",
			FallbackToMemory: true, // Fallback –∫ –ø–∞–º—è—Ç–∏, –µ—Å–ª–∏ MariaDB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
		},
	}

	// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é REST API
	logging.Debug("–°–æ–∑–¥–∞–Ω–∏–µ REST API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
	apiIntegration, err := api.NewServerIntegration(apiConfig)
	if err != nil {
		logging.Error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è REST API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: %v", err)
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è REST API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: %v", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º REST API —Å–µ—Ä–≤–µ—Ä
	logging.Debug("–ó–∞–ø—É—Å–∫ REST API —Å–µ—Ä–≤–µ—Ä–∞...")
	if err := apiIntegration.Start(); err != nil {
		logging.Error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ REST API: %v", err)
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ REST API: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º KCP –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä (–≤–º–µ—Å—Ç–æ TCP)
	logging.Debug("–°–æ–∑–¥–∞–Ω–∏–µ KCP –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
	kcpAddr := fmt.Sprintf(":%d", tcpPort) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ—Ä—Ç —á—Ç–æ –±—ã–ª –¥–ª—è TCP
	gameServer, err := network.NewKCPGameServer(kcpAddr, udpAddr)
	if err != nil {
		logging.Error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è KCP –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è KCP –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–∑–∏—Ü–∏–π –∏–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API
	positionRepo := apiIntegration.GetPositionRepository()
	logging.Info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–∑–∏—Ü–∏–π –∏–≥—Ä–æ–∫–æ–≤")
	// TODO: –í –±—É–¥—É—â–µ–º —Ç–∞–∫–∂–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–π userRepo –¥–ª—è –∏–≥—Ä—ã –∏ REST API

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–∑–∏—Ü–∏–π –≤ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä
	gameServer.SetPositionRepo(positionRepo)
	logging.Debug("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–∑–∏—Ü–∏–π –ø–µ—Ä–µ–¥–∞–Ω –≤ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä
	logging.Debug("–ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
	gameServer.Start()

	logging.Info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
	logging.Info("   üéÆ –ò–≥—Ä–æ–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫: KCP %s, UDP %s (fallback)", kcpAddr, udpAddr)
	logging.Info("   üåê REST API: http://localhost%s", restAddr)
	logging.Info("   üîê JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
	logging.Info("   ‚ù§Ô∏è  Health check: http://localhost%s/health", restAddr)
	logging.Debug("KCP –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")

	// –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è REST API
	logging.Info("üí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è REST API:")
	logging.Info("   curl http://localhost%s/health", restAddr)
	logging.Info("   curl -X POST http://localhost%s/api/auth/login -H 'Content-Type: application/json' -d '{\"username\":\"admin\",\"password\":\"ChangeMe123!\"}'", restAddr)

	// –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –û–°
	sigCh := make(chan os.Signal, 1)
	signal.Notify(sigCh, syscall.SIGINT, syscall.SIGTERM)

	logging.Debug("–û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

	// –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	sig := <-sigCh
	logging.Info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª %v, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...", sig)

	// === GRACEFUL SHUTDOWN ===
	logging.Debug("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º KCP –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä
	logging.Debug("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ KCP –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
	gameServer.Stop()

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º REST API
	logging.Debug("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ REST API...")
	if err := apiIntegration.Stop(); err != nil {
		logging.Error("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ REST API: %v", err)
	}

	if shutdownTel != nil {
		_ = shutdownTel(context.Background())
	}

	if syncManager != nil {
		syncManager.Stop()
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —É–∑–µ–ª
	if regionalNode != nil {
		if err := regionalNode.Stop(); err != nil {
			logging.Error("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ RegionalNode: %v", err)
		}
	}

	logging.Info("üëã –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}
