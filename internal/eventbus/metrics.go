package eventbus

import (
	"net/http"
	"time"

	"github.com/annel0/mmo-game/internal/logging"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"
)

// MetricsExporter –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç Prometheus-–º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è EventBus –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö.
// –≠–∫—Å–ø–æ—Ä—Ç–µ—Ä –Ω–µ –¥–µ–ª–∞–µ—Ç –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∏–Ω—ã ‚Äì
// –æ–Ω –æ–ø–∏—Ä–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å StatsProvider.
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±—ä—è–≤–ª–µ–Ω –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∂—ë—Å—Ç–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç private-type –º–µ—Ç–æ–¥–æ–≤.

// MetricsExporter —É–ø—Ä–∞–≤–ª—è–µ—Ç HTTP-—ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–º Prometheus –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç Gauge/Counter.
type MetricsExporter struct {
	bus  EventBus
	quit chan struct{}
	done chan struct{}
	// Prometheus metrics
	published prometheus.Counter
	consumed  prometheus.Counter
	dropped   prometheus.Counter
	inflight  prometheus.Gauge
}

// NewMetricsExporter —Å–æ–∑–¥–∞—ë—Ç —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä, –Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç HTTP-—Å–µ—Ä–≤–µ—Ä.
func NewMetricsExporter(bus EventBus) *MetricsExporter {
	me := &MetricsExporter{
		bus:  bus,
		quit: make(chan struct{}),
		done: make(chan struct{}),
		published: prometheus.NewCounter(prometheus.CounterOpts{
			Namespace: "eventbus",
			Name:      "messages_published_total",
			Help:      "–û–±—â–µ–µ —á–∏—Å–ª–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.",
		}),
		consumed: prometheus.NewCounter(prometheus.CounterOpts{
			Namespace: "eventbus",
			Name:      "messages_consumed_total",
			Help:      "–û–±—â–µ–µ —á–∏—Å–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.",
		}),
		dropped: prometheus.NewCounter(prometheus.CounterOpts{
			Namespace: "eventbus",
			Name:      "messages_dropped_total",
			Help:      "–°–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–±—Ä–æ—à–µ–Ω–Ω—ã—Ö –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è back-pressure.",
		}),
		inflight: prometheus.NewGauge(prometheus.GaugeOpts{
			Namespace: "eventbus",
			Name:      "messages_inflight",
			Help:      "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏ (–Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö).",
		}),
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ Prometheus.
	prometheus.MustRegister(me.published, me.consumed, me.dropped, me.inflight)
	return me
}

// StartHTTP –∑–∞–ø—É—Å–∫–∞–µ—Ç HTTP-—ç–Ω–¥–ø–æ–∏–Ω—Ç Prometheus –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∞–¥—Ä–µ—Å–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ":2112").
// –ú–µ—Ç–æ–¥ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π: HTTP-—Å–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ä—Ç—É–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ.
func (m *MetricsExporter) StartHTTP(addr string) {
	go func() {
		logging.Info("üìà Prometheus /metrics –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É %s", addr)
		if err := http.ListenAndServe(addr, promhttp.Handler()); err != nil {
			logging.Error("–û—à–∏–±–∫–∞ Prometheus HTTP —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
	}()
	go m.loop()
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫. HTTP-—Å–µ—Ä–≤–µ—Ä –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
// (–¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è ‚Äì –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ä—Ç–µ –∏ —É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ü–µ–ª–∏–∫–æ–º).
func (m *MetricsExporter) Stop() {
	close(m.quit)
	<-m.done
}

func (m *MetricsExporter) loop() {
	ticker := time.NewTicker(1 * time.Second)
	defer ticker.Stop()
	defer close(m.done)

	// –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ Counter –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—à–ª–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø—Ä–∏–±–∞–≤–ª—è—Ç—å –¥–µ–ª—å—Ç—É.
	var prev Stats

	for {
		select {
		case <-ticker.C:
			// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å Stats.
			stats := m.bus.Metrics()

			// –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏—Ä–∞—â–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º counters.
			deltaPub := stats.Published - prev.Published
			deltaCons := stats.Consumed - prev.Consumed
			deltaDrop := stats.Dropped - prev.Dropped

			if deltaPub > 0 {
				m.published.Add(float64(deltaPub))
			}
			if deltaCons > 0 {
				m.consumed.Add(float64(deltaCons))
			}
			if deltaDrop > 0 {
				m.dropped.Add(float64(deltaDrop))
			}

			m.inflight.Set(float64(stats.InFlight))

			prev = stats
		case <-m.quit:
			return
		}
	}
}
