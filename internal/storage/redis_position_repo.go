package storage

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"sync"
	"time"

	"github.com/annel0/mmo-game/internal/vec"
	"github.com/go-redis/redis/v8"
)

// RedisPositionRepository —Ö—Ä–∞–Ω–∏—Ç –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ –≤ Redis –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
type RedisPositionRepository struct {
	client      *redis.Client
	ctx         context.Context
	keyPrefix   string
	ttl         time.Duration
	batchSize   int
	batchMu     sync.Mutex
	batchBuffer map[string]*PlayerPosition
	batchTicker *time.Ticker
	shutdown    chan struct{}
	wg          sync.WaitGroup
}

// PlayerPosition –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
type PlayerPosition struct {
	PlayerID  string        `json:"player_id"`
	Position  vec.Vec3      `json:"position"`
	Velocity  vec.Vec2Float `json:"velocity"`
	Direction int           `json:"direction"`
	UpdatedAt time.Time     `json:"updated_at"`
}

// RedisConfig —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
type RedisConfig struct {
	Addr         string        // –ê–¥—Ä–µ—Å Redis —Å–µ—Ä–≤–µ—Ä–∞
	Password     string        // –ü–∞—Ä–æ–ª—å (–ø—É—Å—Ç–æ–π –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
	DB           int           // –ù–æ–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	KeyPrefix    string        // –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∫–ª—é—á–µ–π
	TTL          time.Duration // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∑–∞–ø–∏—Å–µ–π
	BatchSize    int           // –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
	BatchFlushMs int           // –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–±—Ä–æ—Å–∞ –±–∞—Ç—á–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
}

// DefaultRedisConfig –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func DefaultRedisConfig() *RedisConfig {
	return &RedisConfig{
		Addr:         "localhost:6379",
		Password:     "",
		DB:           0,
		KeyPrefix:    "mmo:pos:",
		TTL:          5 * time.Minute,
		BatchSize:    100,
		BatchFlushMs: 100,
	}
}

// NewRedisPositionRepository —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π Redis —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
func NewRedisPositionRepository(config *RedisConfig) (*RedisPositionRepository, error) {
	if config == nil {
		config = DefaultRedisConfig()
	}

	// –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç Redis
	client := redis.NewClient(&redis.Options{
		Addr:     config.Addr,
		Password: config.Password,
		DB:       config.DB,
	})

	ctx := context.Background()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	if err := client.Ping(ctx).Err(); err != nil {
		return nil, fmt.Errorf("failed to connect to Redis: %w", err)
	}

	repo := &RedisPositionRepository{
		client:      client,
		ctx:         ctx,
		keyPrefix:   config.KeyPrefix,
		ttl:         config.TTL,
		batchSize:   config.BatchSize,
		batchBuffer: make(map[string]*PlayerPosition),
		batchTicker: time.NewTicker(time.Duration(config.BatchFlushMs) * time.Millisecond),
		shutdown:    make(chan struct{}),
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –±–∞—Ç—á–µ–π
	repo.wg.Add(1)
	go repo.batchFlusher()

	log.Printf("üî¥ Connected to Redis at %s", config.Addr)
	return repo, nil
}

// SavePosition —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
func (rpr *RedisPositionRepository) SavePosition(playerID string, position vec.Vec3, velocity vec.Vec2Float, direction int) error {
	pos := &PlayerPosition{
		PlayerID:  playerID,
		Position:  position,
		Velocity:  velocity,
		Direction: direction,
		UpdatedAt: time.Now(),
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞—Ç—á-–±—É—Ñ–µ—Ä
	rpr.batchMu.Lock()
	rpr.batchBuffer[playerID] = pos

	// –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
	if len(rpr.batchBuffer) >= rpr.batchSize {
		batch := rpr.batchBuffer
		rpr.batchBuffer = make(map[string]*PlayerPosition)
		rpr.batchMu.Unlock()

		return rpr.flushBatch(batch)
	}

	rpr.batchMu.Unlock()
	return nil
}

// GetPosition –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
func (rpr *RedisPositionRepository) GetPosition(playerID string) (*PlayerPosition, error) {
	key := rpr.keyPrefix + playerID

	data, err := rpr.client.Get(rpr.ctx, key).Result()
	if err == redis.Nil {
		return nil, nil // –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
	} else if err != nil {
		return nil, fmt.Errorf("failed to get position: %w", err)
	}

	var pos PlayerPosition
	if err := json.Unmarshal([]byte(data), &pos); err != nil {
		return nil, fmt.Errorf("failed to unmarshal position: %w", err)
	}

	return &pos, nil
}

// GetPositions –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
func (rpr *RedisPositionRepository) GetPositions(playerIDs []string) (map[string]*PlayerPosition, error) {
	if len(playerIDs) == 0 {
		return make(map[string]*PlayerPosition), nil
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á–∏
	keys := make([]string, len(playerIDs))
	for i, id := range playerIDs {
		keys[i] = rpr.keyPrefix + id
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–π–ø–ª–∞–π–Ω–æ–º
	pipe := rpr.client.Pipeline()
	cmds := make([]*redis.StringCmd, len(keys))

	for i, key := range keys {
		cmds[i] = pipe.Get(rpr.ctx, key)
	}

	_, err := pipe.Exec(rpr.ctx)
	if err != nil && err != redis.Nil {
		return nil, fmt.Errorf("failed to get positions: %w", err)
	}

	// –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	result := make(map[string]*PlayerPosition)
	for i, cmd := range cmds {
		data, err := cmd.Result()
		if err == redis.Nil {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ
		} else if err != nil {
			log.Printf("‚ö†Ô∏è Failed to get position for %s: %v", playerIDs[i], err)
			continue
		}

		var pos PlayerPosition
		if err := json.Unmarshal([]byte(data), &pos); err != nil {
			log.Printf("‚ö†Ô∏è Failed to unmarshal position for %s: %v", playerIDs[i], err)
			continue
		}

		result[playerIDs[i]] = &pos
	}

	return result, nil
}

// GetNearbyPlayers –ø–æ–ª—É—á–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–µ
func (rpr *RedisPositionRepository) GetNearbyPlayers(minX, minZ, maxX, maxZ float64) ([]*PlayerPosition, error) {
	// Redis –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞–ø—Ä—è–º—É—é
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º Geo –∫–æ–º–∞–Ω–¥—ã Redis –∏–ª–∏ —Ö—Ä–∞–Ω–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å

	// –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Ö–æ–¥ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
	// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis Geo –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π spatial index

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –ø–æ–∑–∏—Ü–∏–π
	pattern := rpr.keyPrefix + "*"
	keys, err := rpr.client.Keys(rpr.ctx, pattern).Result()
	if err != nil {
		return nil, fmt.Errorf("failed to scan keys: %w", err)
	}

	if len(keys) == 0 {
		return []*PlayerPosition{}, nil
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–æ–º
	pipe := rpr.client.Pipeline()
	cmds := make([]*redis.StringCmd, len(keys))

	for i, key := range keys {
		cmds[i] = pipe.Get(rpr.ctx, key)
	}

	_, err = pipe.Exec(rpr.ctx)
	if err != nil && err != redis.Nil {
		return nil, fmt.Errorf("failed to get positions: %w", err)
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
	result := make([]*PlayerPosition, 0)
	for _, cmd := range cmds {
		data, err := cmd.Result()
		if err != nil {
			continue
		}

		var pos PlayerPosition
		if err := json.Unmarshal([]byte(data), &pos); err != nil {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
		if float64(pos.Position.X) >= minX && float64(pos.Position.X) <= maxX &&
			float64(pos.Position.Z) >= minZ && float64(pos.Position.Z) <= maxZ {
			result = append(result, &pos)
		}
	}

	return result, nil
}

// DeletePosition —É–¥–∞–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
func (rpr *RedisPositionRepository) DeletePosition(playerID string) error {
	key := rpr.keyPrefix + playerID

	// –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞—Ç—á-–±—É—Ñ–µ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
	rpr.batchMu.Lock()
	delete(rpr.batchBuffer, playerID)
	rpr.batchMu.Unlock()

	// –£–¥–∞–ª—è–µ–º –∏–∑ Redis
	if err := rpr.client.Del(rpr.ctx, key).Err(); err != nil {
		return fmt.Errorf("failed to delete position: %w", err)
	}

	return nil
}

// GetActivePlayerCount –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
func (rpr *RedisPositionRepository) GetActivePlayerCount() (int64, error) {
	pattern := rpr.keyPrefix + "*"

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º SCAN –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∫–ª—é—á–µ–π
	var count int64
	iter := rpr.client.Scan(rpr.ctx, 0, pattern, 0).Iterator()

	for iter.Next(rpr.ctx) {
		count++
	}

	if err := iter.Err(); err != nil {
		return 0, fmt.Errorf("failed to count players: %w", err)
	}

	return count, nil
}

// SavePositionsGeo —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è Redis GEO –¥–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
func (rpr *RedisPositionRepository) SavePositionGeo(playerID string, position vec.Vec3) error {
	geoKey := rpr.keyPrefix + "geo"

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ GEO –∏–Ω–¥–µ–∫—Å (X –∫–∞–∫ longitude, Z –∫–∞–∫ latitude)
	// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ª–≥–æ—Ç—ã/—à–∏—Ä–æ—Ç—ã
	lon := float64(position.X) / 1000.0 // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∏—Ä 1000x1000
	lat := float64(position.Z) / 1000.0

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
	if lon < -180 {
		lon = -180
	} else if lon > 180 {
		lon = 180
	}

	if lat < -90 {
		lat = -90
	} else if lat > 90 {
		lat = 90
	}

	// GeoAdd –æ–∂–∏–¥–∞–µ—Ç –ø–∞—Ä—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
	if err := rpr.client.GeoAdd(rpr.ctx, geoKey, &redis.GeoLocation{
		Name:      playerID,
		Longitude: lon,
		Latitude:  lat,
	}).Err(); err != nil {
		return fmt.Errorf("failed to save geo position: %w", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTL –¥–ª—è GEO –∫–ª—é—á–∞
	rpr.client.Expire(rpr.ctx, geoKey, rpr.ttl)

	return nil
}

// GetNearbyPlayersGeo –ø–æ–ª—É—á–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ –∏—Å–ø–æ–ª—å–∑—É—è GEO –∏–Ω–¥–µ–∫—Å
func (rpr *RedisPositionRepository) GetNearbyPlayersGeo(centerX, centerZ float64, radiusMeters float64) ([]string, error) {
	geoKey := rpr.keyPrefix + "geo"

	// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
	lon := centerX / 1000.0
	lat := centerZ / 1000.0

	// –ü–æ–∏—Å–∫ –≤ —Ä–∞–¥–∏—É—Å–µ
	query := &redis.GeoSearchQuery{
		Longitude:  lon,
		Latitude:   lat,
		Radius:     radiusMeters,
		RadiusUnit: "m",
	}

	names, err := rpr.client.GeoSearch(rpr.ctx, geoKey, query).Result()
	if err != nil {
		return nil, fmt.Errorf("failed to search nearby players: %w", err)
	}

	// –†–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ []string —Å –∏–º–µ–Ω–∞–º–∏ (ID –∏–≥—Ä–æ–∫–æ–≤)
	return names, nil
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis
func (rpr *RedisPositionRepository) Close() error {
	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞—Ç—á-—Ñ–ª–∞—à–µ—Ä
	close(rpr.shutdown)
	rpr.wg.Wait()

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ
	rpr.batchMu.Lock()
	if len(rpr.batchBuffer) > 0 {
		rpr.flushBatch(rpr.batchBuffer)
	}
	rpr.batchMu.Unlock()

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	return rpr.client.Close()
}

// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç–æ–¥—ã

// batchFlusher –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –±–∞—Ç—á-–±—É—Ñ–µ—Ä
func (rpr *RedisPositionRepository) batchFlusher() {
	defer rpr.wg.Done()

	for {
		select {
		case <-rpr.shutdown:
			return
		case <-rpr.batchTicker.C:
			rpr.batchMu.Lock()
			if len(rpr.batchBuffer) > 0 {
				batch := rpr.batchBuffer
				rpr.batchBuffer = make(map[string]*PlayerPosition)
				rpr.batchMu.Unlock()

				if err := rpr.flushBatch(batch); err != nil {
					log.Printf("‚ùå Failed to flush batch: %v", err)
				}
			} else {
				rpr.batchMu.Unlock()
			}
		}
	}
}

// flushBatch –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –±–∞—Ç—á –ø–æ–∑–∏—Ü–∏–π –≤ Redis
func (rpr *RedisPositionRepository) flushBatch(batch map[string]*PlayerPosition) error {
	if len(batch) == 0 {
		return nil
	}

	pipe := rpr.client.Pipeline()

	for playerID, pos := range batch {
		key := rpr.keyPrefix + playerID

		data, err := json.Marshal(pos)
		if err != nil {
			log.Printf("‚ö†Ô∏è Failed to marshal position for %s: %v", playerID, err)
			continue
		}

		pipe.Set(rpr.ctx, key, data, rpr.ttl)

		// –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º GEO –∏–Ω–¥–µ–∫—Å
		if err := rpr.SavePositionGeo(playerID, pos.Position); err != nil {
			log.Printf("‚ö†Ô∏è Failed to update GEO for %s: %v", playerID, err)
		}
	}

	_, err := pipe.Exec(rpr.ctx)
	if err != nil {
		return fmt.Errorf("failed to execute batch: %w", err)
	}

	return nil
}

// GetStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
func (rpr *RedisPositionRepository) GetStats() (string, error) {
	info, err := rpr.client.Info(rpr.ctx, "stats").Result()
	if err != nil {
		return "", err
	}

	count, _ := rpr.GetActivePlayerCount()

	return fmt.Sprintf("Redis Position Repository: %d active players\n%s", count, info), nil
}
