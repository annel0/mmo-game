package network

import (
	"context"
	"crypto/rand"
	"encoding/base64"
	"fmt"
	"sync"
	"time"

	"github.com/annel0/mmo-game/internal/auth"
	"github.com/annel0/mmo-game/internal/logging"
	"github.com/annel0/mmo-game/internal/protocol"
	"github.com/annel0/mmo-game/internal/storage"
	"github.com/annel0/mmo-game/internal/world"
	"github.com/annel0/mmo-game/internal/world/entity"
)

// KCPGameServer –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π KCP –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
type KCPGameServer struct {
	kcpServer    *ChannelServer
	udpServer    *UDPServerPB // –û—Å—Ç–∞–≤–ª—è–µ–º UDP –¥–ª—è fallback
	worldManager *world.WorldManager
	gameHandler  *GameHandlerPB
	gameAuth     *auth.GameAuthenticator
	logger       *logging.Logger
	ctx          context.Context
	cancel       context.CancelFunc
	wg           sync.WaitGroup
}

// NewKCPGameServer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π KCP
func NewKCPGameServer(kcpAddr, udpAddr string) (*KCPGameServer, error) {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Ç–º–µ–Ω–æ–π
	ctx, cancel := context.WithCancel(context.Background())

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
	logger := logging.GetNetworkLogger()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –º–∏—Ä–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –º–∏—Ä–∞
	worldManager := world.NewWorldManager(1234)

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—É—â–Ω–æ—Å—Ç–µ–π
	entityManager := entity.NewEntityManager()

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (in-memory)
	userRepo, err := auth.NewMemoryUserRepo()
	if err != nil {
		cancel()
		return nil, fmt.Errorf("failed to create user repository: %w", err)
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 32-–±–∞–π—Ç–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ –≤ –ø–∞–∫–µ—Ç–µ auth
	jwtSecret := make([]byte, 32)
	if _, err := rand.Read(jwtSecret); err != nil {
		cancel()
		return nil, fmt.Errorf("failed to generate JWT secret: %w", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç (base64) –≤ –ø–∞–∫–µ—Ç auth
	if err := auth.SetJWTSecret(base64.StdEncoding.EncodeToString(jwtSecret)); err != nil {
		cancel()
		return nil, fmt.Errorf("failed to set JWT secret: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
	gameAuth := auth.NewGameAuthenticator(userRepo, jwtSecret)
	logger.Info("üîê KCP GameAuthenticator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å JWT –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")

	// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	gameHandler := NewGameHandlerPB(worldManager, entityManager, userRepo)

	// –°–æ–∑–¥–∞–µ–º KCP —Å–µ—Ä–≤–µ—Ä
	kcpConfig := DefaultChannelConfig(ChannelKCP)
	kcpServer := NewChannelServer(kcpAddr, kcpConfig)

	// –°–æ–∑–¥–∞–µ–º UDP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è fallback
	udpServer, err := NewUDPServerPB(udpAddr, worldManager)
	if err != nil {
		cancel()
		return nil, fmt.Errorf("failed to create UDP server: %w", err)
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ KCP —Å–µ—Ä–≤–µ—Ä–∞
	kcpServer.SetHandlers(
		func(clientID string, channel NetChannel) {
			// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
			logger.Info("üîó KCP –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: %s", clientID)

			// TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å GameHandler –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
		},
		func(clientID string) {
			// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
			logger.Info("üëã KCP –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: %s", clientID)

			// TODO: –£–≤–µ–¥–æ–º–∏—Ç—å GameHandler –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
		},
		func(clientID string, msg *protocol.GameMessage) {
			// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
			logger.Debug("üì® –ü–æ–ª—É—á–µ–Ω–æ KCP —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %v", clientID, msg.Type)

			// TODO: –ü–µ—Ä–µ–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ GameHandler
		},
	)

	// –°–≤—è–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
	gameHandler.SetGameAuthenticator(gameAuth)
	udpServer.SetGameHandler(gameHandler)

	return &KCPGameServer{
		kcpServer:    kcpServer,
		udpServer:    udpServer,
		worldManager: worldManager,
		gameHandler:  gameHandler,
		gameAuth:     gameAuth,
		logger:       logger,
		ctx:          ctx,
		cancel:       cancel,
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç KCP –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä
func (kgs *KCPGameServer) Start() error {
	// –ó–∞–ø—É—Å–∫–∞–µ–º KCP —Å–µ—Ä–≤–µ—Ä
	if err := kgs.kcpServer.Start(); err != nil {
		return fmt.Errorf("failed to start KCP server: %w", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º UDP —Å–µ—Ä–≤–µ—Ä –¥–ª—è fallback
	kgs.udpServer.Start()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∏—Ä–∞
	kgs.worldManager.Run(kgs.ctx)

	// –°–æ–∑–¥–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã
	kgs.wg.Add(1)
	go func() {
		defer kgs.wg.Done()

		// –¢–∏–∫–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã —Å —á–∞—Å—Ç–æ—Ç–æ–π 20 —Ç–∏–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
		ticker := time.NewTicker(50 * time.Millisecond)
		defer ticker.Stop()

		var lastTick time.Time = time.Now()

		for {
			select {
			case <-kgs.ctx.Done():
				return
			case tickTime := <-ticker.C:
				// –í—ã—á–∏—Å–ª—è–µ–º –¥–µ–ª—å—Ç—É –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Ç–∏–∫–∞–º–∏
				dt := tickTime.Sub(lastTick).Seconds()
				lastTick = tickTime

				// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã
				kgs.gameHandler.Tick(dt)
			}
		}
	}()

	kgs.logger.Info("üéÆ KCP –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (KCP: %s, UDP fallback: %s)",
		"kcp://"+kgs.kcpServer.addr, kgs.udpServer.conn.LocalAddr())
	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç KCP –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä
func (kgs *KCPGameServer) Stop() {
	kgs.logger.Info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ KCP –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")

	// –û—Ç–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
	kgs.cancel()

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º KCP —Å–µ—Ä–≤–µ—Ä
	if err := kgs.kcpServer.Stop(); err != nil {
		kgs.logger.Error("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ KCP —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UDP —Å–µ—Ä–≤–µ—Ä
	kgs.udpServer.Stop()

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	kgs.wg.Wait()

	kgs.logger.Info("‚úÖ KCP –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// SetPositionRepo —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–∑–∏—Ü–∏–π –∏–≥—Ä–æ–∫–æ–≤
func (kgs *KCPGameServer) SetPositionRepo(positionRepo storage.PositionRepo) {
	if kgs.gameHandler != nil {
		kgs.gameHandler.SetPositionRepo(positionRepo)
	}
}

// GetConnectedClients –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
func (kgs *KCPGameServer) GetConnectedClients() int {
	if kgs.kcpServer != nil {
		return kgs.kcpServer.GetClientCount()
	}
	return 0
}
