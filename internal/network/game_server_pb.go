package network

import (
	"context"
	"crypto/rand"
	"encoding/base64"
	"log"
	"sync"
	"time"

	"github.com/annel0/mmo-game/internal/auth"
	"github.com/annel0/mmo-game/internal/storage"
	"github.com/annel0/mmo-game/internal/world"
	"github.com/annel0/mmo-game/internal/world/entity"
)

// GameServerPB –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Protocol Buffers
type GameServerPB struct {
	tcpServer    *TCPServerPB
	udpServer    *UDPServerPB
	worldManager *world.WorldManager
	gameHandler  *GameHandlerPB
	gameAuth     *auth.GameAuthenticator
	ctx          context.Context
	cancel       context.CancelFunc
	wg           sync.WaitGroup
}

// NewGameServerPB —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Protocol Buffers
func NewGameServerPB(tcpAddr, udpAddr string) (*GameServerPB, error) {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Ç–º–µ–Ω–æ–π
	ctx, cancel := context.WithCancel(context.Background())

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –º–∏—Ä–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –º–∏—Ä–∞
	worldManager := world.NewWorldManager(1234) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∏—Ä–∞

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—É—â–Ω–æ—Å—Ç–µ–π
	entityManager := entity.NewEntityManager()

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (in-memory)
	userRepo, err := auth.NewMemoryUserRepo()
	if err != nil {
		cancel()
		return nil, err
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 32-–±–∞–π—Ç–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ –≤ –ø–∞–∫–µ—Ç–µ auth
	jwtSecret := make([]byte, 32)
	if _, err := rand.Read(jwtSecret); err != nil {
		cancel()
		return nil, err
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç (base64) –≤ –ø–∞–∫–µ—Ç auth, —á—Ç–æ–±—ã ValidateJWT –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Ç–æ—Ç –∂–µ –∫–ª—é—á
	if err := auth.SetJWTSecret(base64.StdEncoding.EncodeToString(jwtSecret)); err != nil {
		cancel()
		return nil, err
	}

	// –°–æ–∑–¥–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
	gameAuth := auth.NewGameAuthenticator(userRepo, jwtSecret)
	log.Printf("üîê GameAuthenticator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å JWT –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")

	// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	gameHandler := NewGameHandlerPB(worldManager, entityManager, userRepo)

	// –°–æ–∑–¥–∞–µ–º TCP-—Å–µ—Ä–≤–µ—Ä
	tcpServer, err := NewTCPServerPB(tcpAddr, worldManager)
	if err != nil {
		cancel()
		return nil, err
	}

	// –°–æ–∑–¥–∞–µ–º UDP-—Å–µ—Ä–≤–µ—Ä
	udpServer, err := NewUDPServerPB(udpAddr, worldManager)
	if err != nil {
		cancel()
		return nil, err
	}

	// –°–≤—è–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–º–µ—Å—Ç–µ
	tcpServer.SetGameHandler(gameHandler)
	udpServer.SetGameHandler(gameHandler) // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å UDP —Å–µ—Ä–≤–µ—Ä–∞ —Å GameHandler
	gameHandler.SetTCPServer(tcpServer)
	gameHandler.SetUDPServer(udpServer)
	gameHandler.SetGameAuthenticator(gameAuth)

	return &GameServerPB{
		tcpServer:    tcpServer,
		udpServer:    udpServer,
		worldManager: worldManager,
		gameHandler:  gameHandler,
		gameAuth:     gameAuth,
		ctx:          ctx,
		cancel:       cancel,
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä
func (gs *GameServerPB) Start() error {
	// –ó–∞–ø—É—Å–∫–∞–µ–º TCP —Å–µ—Ä–≤–µ—Ä
	gs.tcpServer.Start()

	// –ó–∞–ø—É—Å–∫–∞–µ–º UDP —Å–µ—Ä–≤–µ—Ä
	gs.udpServer.Start()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∏—Ä–∞
	gs.worldManager.Run(gs.ctx)

	// –°–æ–∑–¥–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä—ã
	gs.wg.Add(1)
	go func() {
		defer gs.wg.Done()

		// –¢–∏–∫–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã —Å —á–∞—Å—Ç–æ—Ç–æ–π 20 —Ç–∏–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
		ticker := time.NewTicker(50 * time.Millisecond)
		defer ticker.Stop()

		var lastTick time.Time = time.Now()

		for {
			select {
			case <-gs.ctx.Done():
				return
			case tickTime := <-ticker.C:
				// –í—ã—á–∏—Å–ª—è–µ–º –¥–µ–ª—å—Ç—É –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Ç–∏–∫–∞–º–∏
				dt := tickTime.Sub(lastTick).Seconds()
				lastTick = tickTime

				// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã
				gs.gameHandler.Tick(dt)
			}
		}
	}()

	log.Printf("–ò–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (TCP: %s, UDP: %s)", gs.tcpServer.listener.Addr(), gs.udpServer.conn.LocalAddr())
	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä
func (s *GameServerPB) Stop() {
	// –û—Ç–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –≥–æ—Ä—É—Ç–∏–Ω—ã
	s.cancel()

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TCP-—Å–µ—Ä–≤–µ—Ä
	s.tcpServer.Stop()

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UDP-—Å–µ—Ä–≤–µ—Ä
	s.udpServer.Stop()

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	s.wg.Wait()

	log.Println("–ò–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// SetPositionRepo —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–∑–∏—Ü–∏–π –∏–≥—Ä–æ–∫–æ–≤
func (gs *GameServerPB) SetPositionRepo(positionRepo storage.PositionRepo) {
	if gs.gameHandler != nil {
		gs.gameHandler.SetPositionRepo(positionRepo)
	}
}
