package network

import (
	"context"
	"encoding/binary"
	"encoding/json"
	"fmt"
	"hash/crc32"
	"log"
	"math"
	"math/rand"
	"sync"
	"time"

	"github.com/annel0/mmo-game/internal/auth"
	"github.com/annel0/mmo-game/internal/protocol"
	"github.com/annel0/mmo-game/internal/storage"
	"github.com/annel0/mmo-game/internal/vec"
	"github.com/annel0/mmo-game/internal/world"
	"github.com/annel0/mmo-game/internal/world/block"
	"github.com/annel0/mmo-game/internal/world/entity"
	"google.golang.org/protobuf/proto"
)

// –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –≤ –±–ª–æ–∫–∞—Ö
const ChunkSize = 16

// GameHandlerPB –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Protocol Buffers
type GameHandlerPB struct {
	worldManager  *world.WorldManager
	entityManager *entity.EntityManager
	userRepo      auth.UserRepository
	gameAuth      *auth.GameAuthenticator
	positionRepo  storage.PositionRepo // –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–∑–∏—Ü–∏–π –∏–≥—Ä–æ–∫–æ–≤

	tcpServer *TCPServerPB
	udpServer *UDPServerPB

	playerEntities map[string]uint64   // connID -> entityID
	sessions       map[string]*Session // connID -> session

	serializer   *protocol.MessageSerializer
	lastEntityID uint64
	mu           sync.RWMutex

	// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	tickCounter         int     // –°—á–µ—Ç—á–∏–∫ —Ç–∏–∫–æ–≤
	worldUpdateInterval int     // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ç–∏–∫–∞—Ö (20 —Ç–∏–∫–æ–≤ = 1 —Å–µ–∫ –ø—Ä–∏ 20 TPS)
	lastUpdateTime      float64 // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
}

// Session stores authenticated player data for the lifetime of a TCP connection.
// UserID - –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π)
// EntityID - –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—É—â–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
type Session struct {
	UserID   uint64 // –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±—ã–≤—à–∏–π PlayerID)
	EntityID uint64 // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π —Å—É—â–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞ –≤ –º–∏—Ä–µ
	Username string
	Token    string
	IsAdmin  bool
}

// NewGameHandlerPB —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Protocol Buffers
func NewGameHandlerPB(worldManager *world.WorldManager, entityManager *entity.EntityManager, userRepo auth.UserRepository) *GameHandlerPB {
	handler := &GameHandlerPB{
		worldManager:   worldManager,
		entityManager:  entityManager,
		userRepo:       userRepo,
		playerEntities: make(map[string]uint64),
		sessions:       make(map[string]*Session),

		serializer:   createMessageSerializer(),
		lastEntityID: 0,

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
		tickCounter:         0,
		worldUpdateInterval: 2, // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 —Ç–∏–∫–æ–≤ = 2 —Ä–∞–∑–∞ –≤ —Å–µ–∫—É–Ω–¥—É –ø—Ä–∏ 20 TPS
		lastUpdateTime:      0,
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–∫ —Å–µ—Ç–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –º–∏—Ä–∞
	worldManager.SetNetworkManager(handler)

	return handler
}

// SetTCPServer —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç TCP —Å–µ—Ä–≤–µ—Ä
func (gh *GameHandlerPB) SetTCPServer(server *TCPServerPB) {
	gh.tcpServer = server
}

// SetUDPServer —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç UDP —Å–µ—Ä–≤–µ—Ä
func (gh *GameHandlerPB) SetUDPServer(server *UDPServerPB) {
	gh.udpServer = server
}

// SetGameAuthenticator —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
func (gh *GameHandlerPB) SetGameAuthenticator(gameAuth *auth.GameAuthenticator) {
	gh.gameAuth = gameAuth
}

// SetPositionRepo —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–∑–∏—Ü–∏–π
func (gh *GameHandlerPB) SetPositionRepo(positionRepo storage.PositionRepo) {
	gh.positionRepo = positionRepo
}

// GetEntityPosition –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é —Å—É—â–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Vec3 (x, y, layer).
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –∏–≥—Ä–æ–∫–æ–≤.
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//
//	entityID - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—É—â–Ω–æ—Å—Ç–∏
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
//
//	vec.Vec3 - –ø–æ–∑–∏—Ü–∏—è –≤ 3D –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ (–≥–¥–µ Z = layer)
//	bool - true –µ—Å–ª–∏ —Å—É—â–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞
func (gh *GameHandlerPB) GetEntityPosition(entityID uint64) (vec.Vec3, bool) {
	entity, exists := gh.entityManager.GetEntity(entityID)
	if !exists {
		return vec.Vec3{}, false
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º layer –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–≥–æ, –≤ –∫–∞–∫–æ–º —Å–ª–æ–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏–≥—Ä–æ–∫
	// –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º 1 –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π layer
	layer := 1

	// –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è layer –Ω–∞ –æ—Å–Ω–æ–≤–µ:
	// - —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞ –ø–æ–¥ –∏–≥—Ä–æ–∫–æ–º
	// - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—è –≤ —Å—É—â–Ω–æ—Å—Ç–∏
	// - –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∏—Ä–∞

	return vec.Vec3{
		X: entity.Position.X,
		Y: entity.Position.Y,
		Z: layer,
	}, true
}

// GetDefaultSpawnPosition –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–ø–∞–≤–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
//
//	vec.Vec3 - –ø–æ–∑–∏—Ü–∏—è —Å–ø–∞–≤–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func (gh *GameHandlerPB) GetDefaultSpawnPosition() vec.Vec3 {
	// –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å–ø–∞–≤–Ω–∞
	// –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å–ø–∞–≤–Ω–∞
	return vec.Vec3{X: 0, Y: 0, Z: 1}
}

// HandleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
func (gh *GameHandlerPB) HandleMessage(connID string, msg *protocol.GameMessage) {
	switch msg.Type {
	case protocol.MessageType_AUTH:
		gh.handleAuth(connID, msg)
	case protocol.MessageType_BLOCK_UPDATE:
		gh.handleBlockUpdate(connID, msg)
	case protocol.MessageType_CHUNK_REQUEST:
		gh.handleChunkRequest(connID, msg)
	case protocol.MessageType_CHUNK_BATCH_REQUEST:
		gh.handleChunkBatchRequest(connID, msg)
	case protocol.MessageType_ENTITY_ACTION:
		gh.handleEntityAction(connID, msg)
	case protocol.MessageType_ENTITY_MOVE:
		gh.handleEntityMove(connID, msg)
	case protocol.MessageType_CHAT:
		gh.handleChat(connID, msg)
	default:
		log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: %d", msg.Type)
	}
}

// OnClientConnect –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
func (gh *GameHandlerPB) OnClientConnect(connID string) {
	log.Printf("–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: %s", connID)
}

// OnClientDisconnect –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
func (gh *GameHandlerPB) OnClientDisconnect(connID string) {
	gh.mu.Lock()
	defer gh.mu.Unlock()

	// –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏—é –∏–≥—Ä–æ–∫–∞
	session, sessionExists := gh.sessions[connID]
	entityID, entityExists := gh.playerEntities[connID]

	if sessionExists && entityExists {
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º
		if gh.positionRepo != nil {
			if currentPos, found := gh.GetEntityPosition(entityID); found {
				ctx := context.Background()
				if err := gh.positionRepo.Save(ctx, session.UserID, currentPos); err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", session.UserID, err)
				} else {
					log.Printf("üíæ –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ %s —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: (%d, %d, %d)", session.Username, currentPos.X, currentPos.Y, currentPos.Z)
				}
			} else {
				log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å—É—â–Ω–æ—Å—Ç–∏ %d –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", entityID)
			}
		} else {
			log.Printf("‚ö†Ô∏è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∑–∏—Ü–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
		}

		// –£–¥–∞–ª—è–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∏–∑ –º–∏—Ä–∞
		gh.DespawnEntity(entityID)

		// –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫–∏
		delete(gh.playerEntities, connID)
		delete(gh.sessions, connID)

		// –û–ø–æ–≤–µ—â–∞–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
		despawnMsg := &protocol.EntityDespawnMessage{
			EntityId: entityID,
			Reason:   "disconnected",
		}
		gh.broadcastMessage(protocol.MessageType_ENTITY_DESPAWN, despawnMsg)

		log.Printf("üö™ –ö–ª–∏–µ–Ω—Ç %s (%s) –æ—Ç–∫–ª—é—á–µ–Ω, –ø–æ–∑–∏—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", connID, session.Username)
	} else {
		log.Printf("üö™ –ö–ª–∏–µ–Ω—Ç %s –æ—Ç–∫–ª—é—á–µ–Ω (—Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)", connID)
	}
}

// Tick –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞
func (gh *GameHandlerPB) Tick(dt float64) {
	// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏
	gh.entityManager.UpdateEntities(dt, gh)

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–∏–∫–æ–≤
	gh.tickCounter++

	// –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –∫–∞–∂–¥—ã–π —Ç–∏–∫, –∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
	// –≠—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–µ—Ç—å —Å 20 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π/—Å–µ–∫ –¥–æ 2 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π/—Å–µ–∫
	if gh.tickCounter%gh.worldUpdateInterval == 0 {
		gh.sendWorldUpdates()
		//log.Printf("üîÑ –¢–∏–∫ %d: –æ—Ç–ø—Ä–∞–≤–∫–∞ world updates (–∏–Ω—Ç–µ—Ä–≤–∞–ª: %d —Ç–∏–∫–æ–≤)", gh.tickCounter, gh.worldUpdateInterval)
	}

	// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
	gh.autoSavePositions()
}

// autoSavePositions –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –≤—Å–µ—Ö –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤.
// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∏–∑ Tick –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö.
func (gh *GameHandlerPB) autoSavePositions() {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–∞–π–º–µ—Ä - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥
	// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–∏–∫–µ—Ä
	const autoSaveInterval = 30.0 // —Å–µ–∫—É–Ω–¥

	// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
	// TODO: –í –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
	now := float64(time.Now().Unix())

	// –ß–∏—Ç–∞–µ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ GameHandlerPB –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
	// –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏
	gh.mu.RLock()
	sessionsCount := len(gh.sessions)
	playerCount := len(gh.playerEntities)
	gh.mu.RUnlock()

	// –ï—Å–ª–∏ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
	if sessionsCount == 0 || playerCount == 0 {
		return
	}

	// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ lastAutoSave –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
	if int(now)%int(autoSaveInterval) != 0 {
		return
	}

	if gh.positionRepo == nil {
		return // –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
	}

	// –°–æ–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤
	positionsToSave := make(map[uint64]vec.Vec3)

	gh.mu.RLock()
	for connID, session := range gh.sessions {
		if entityID, exists := gh.playerEntities[connID]; exists {
			if currentPos, found := gh.GetEntityPosition(entityID); found {
				positionsToSave[session.UserID] = currentPos
			}
		}
	}
	gh.mu.RUnlock()

	// –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
	if len(positionsToSave) > 0 {
		ctx := context.Background()
		if err := gh.positionRepo.BatchSave(ctx, positionsToSave); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –∏–≥—Ä–æ–∫–æ–≤: %v", err)
		} else {
			log.Printf("üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è %d –∏–≥—Ä–æ–∫–æ–≤", len(positionsToSave))
		}
	}
}

// GetBlock —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å EntityAPI
func (gh *GameHandlerPB) GetBlock(pos vec.Vec2) block.BlockID {
	// –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫ –∏–∑ –º–∏—Ä–∞
	worldBlock := gh.worldManager.GetBlock(pos)
	return worldBlock.ID
}

// SetBlock —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å EntityAPI
func (gh *GameHandlerPB) SetBlock(pos vec.Vec2, id block.BlockID) {
	// –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –¥–ª—è –º–∏—Ä–∞
	worldBlock := world.NewBlock(id)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫ –≤ –º–∏—Ä–µ
	gh.worldManager.SetBlock(pos, worldBlock)
}

// GetBlockMetadata —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å EntityAPI
func (gh *GameHandlerPB) GetBlockMetadata(pos vec.Vec2, key string) interface{} {
	// –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫ –∏–∑ –º–∏—Ä–∞
	worldBlock := gh.worldManager.GetBlock(pos)

	// –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
	if worldBlock.Payload != nil {
		if value, exists := worldBlock.Payload[key]; exists {
			return value
		}
	}

	return nil
}

// SetBlockMetadata —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å EntityAPI
func (gh *GameHandlerPB) SetBlockMetadata(pos vec.Vec2, key string, value interface{}) {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
	worldBlock := gh.worldManager.GetBlock(pos)

	// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
	if worldBlock.Payload == nil {
		worldBlock.Payload = make(map[string]interface{})
	}

	worldBlock.Payload[key] = value

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫
	gh.worldManager.SetBlock(pos, worldBlock)
}

// GetEntitiesInRange —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å EntityAPI
func (gh *GameHandlerPB) GetEntitiesInRange(center vec.Vec2, radius float64) []*entity.Entity {
	return gh.entityManager.GetEntitiesInRange(center, radius)
}

// GetBehavior —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å EntityAPI
func (gh *GameHandlerPB) GetBehavior(entityType entity.EntityType) (entity.EntityBehavior, bool) {
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π
	return gh.entityManager.GetBehavior(entityType)
}

// MoveEntity —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å EntityAPI
func (gh *GameHandlerPB) MoveEntity(entity *entity.Entity, direction entity.MovementDirection, dt float64) bool {
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å—É—â–Ω–æ—Å—Ç–∏
	behavior, exists := gh.GetBehavior(entity.Type)
	if !exists {
		log.Printf("–ù–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–∏ —Ç–∏–ø–∞ %d", entity.Type)
		return false
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏
	moveSpeed := behavior.GetMoveSpeed()

	// –í—ã—á–∏—Å–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	moveDir := vec.Vec2Float{X: 0, Y: 0}

	if direction.Up {
		moveDir.Y -= 1
	}
	if direction.Down {
		moveDir.Y += 1
	}
	if direction.Left {
		moveDir.X -= 1
	}
	if direction.Right {
		moveDir.X += 1
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∑–≥–ª—è–¥–∞ —Å—É—â–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ
	if moveDir.X != 0 || moveDir.Y != 0 {
		entity.Direction = calculateDirection(moveDir)
	} else {
		return false // –ù–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è
	}

	// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä –¥–ª—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
	if moveDir.X != 0 && moveDir.Y != 0 {
		length := math.Sqrt(moveDir.X*moveDir.X + moveDir.Y*moveDir.Y)
		moveDir.X /= length
		moveDir.Y /= length
	}

	// –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
	newPos := entity.PrecisePos.Add(moveDir.Mul(moveSpeed * dt))

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –±–ª–æ–∫–∞–º–∏ —Å —É—á—ë—Ç–æ–º —Å–ª–æ—ë–≤ –∏ –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç–∏
	blockX := int(math.Floor(newPos.X))
	blockY := int(math.Floor(newPos.Y))

	for x := blockX - 1; x <= blockX+1; x++ {
		for y := blockY - 1; y <= blockY+1; y++ {
			pos := vec.Vec2{X: x, Y: y}

			// –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ–ø—Ä–æ—Ö–æ–¥–∏–º–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–ª–∏–∑–∏—é
			if !gh.isPositionWalkable(pos) {
				if gh.checkEntityBlockCollision(entity, newPos, pos) {
					behavior.OnCollision(gh, entity, gh.worldManager.GetBlockLayer(pos, world.LayerActive).ID, newPos)
					return false
				}
			}
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏
	nearbyEntities := gh.GetEntitiesInRange(entity.Position, 2.0)
	for _, other := range nearbyEntities {
		if other.ID == entity.ID {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º—É —Å—É—â–Ω–æ—Å—Ç—å
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏—é –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏
		if gh.checkEntityEntityCollision(entity, newPos, other) {
			// –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–∏–∑–∏–π
			behavior.OnCollision(gh, entity, other, newPos)
			return false
		}
	}

	// –ï—Å–ª–∏ –∫–æ–ª–ª–∏–∑–∏–π –Ω–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
	entity.PrecisePos = newPos
	entity.Position = newPos.ToVec2()

	// –û–ø–æ–≤–µ—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
	gh.sendEntityMoveUpdate(entity)

	return true
}

// calculateDirection –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∑–≥–ª—è–¥–∞ –ø–æ –≤–µ–∫—Ç–æ—Ä—É –¥–≤–∏–∂–µ–Ω–∏—è
func calculateDirection(moveDir vec.Vec2Float) int {
	// –î–ª—è 4 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
	if math.Abs(moveDir.X) > math.Abs(moveDir.Y) {
		if moveDir.X > 0 {
			return 1 // –í–æ—Å—Ç–æ–∫ (–≤–ø—Ä–∞–≤–æ)
		} else {
			return 3 // –ó–∞–ø–∞–¥ (–≤–ª–µ–≤–æ)
		}
	} else {
		if moveDir.Y > 0 {
			return 0 // –Æ–≥ (–≤–Ω–∏–∑)
		} else {
			return 2 // –°–µ–≤–µ—Ä (–≤–≤–µ—Ä—Ö)
		}
	}
}

// checkEntityBlockCollision –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–ª–∏–∑–∏—é —Å—É—â–Ω–æ—Å—Ç–∏ —Å –±–ª–æ–∫–æ–º
func (gh *GameHandlerPB) checkEntityBlockCollision(entity *entity.Entity, newPos vec.Vec2Float, blockPos vec.Vec2) bool {
	// –ì—Ä–∞–Ω–∏—Ü—ã —Å—É—â–Ω–æ—Å—Ç–∏
	entityLeft := newPos.X - entity.Size.X/2
	entityRight := newPos.X + entity.Size.X/2
	entityTop := newPos.Y - entity.Size.Y/2
	entityBottom := newPos.Y + entity.Size.Y/2

	// –ì—Ä–∞–Ω–∏—Ü—ã –±–ª–æ–∫–∞
	blockLeft := float64(blockPos.X)
	blockRight := float64(blockPos.X) + 1.0
	blockTop := float64(blockPos.Y)
	blockBottom := float64(blockPos.Y) + 1.0

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
	return entityRight > blockLeft &&
		entityLeft < blockRight &&
		entityBottom > blockTop &&
		entityTop < blockBottom
}

// checkEntityEntityCollision –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–ª–∏–∑–∏—é –º–µ–∂–¥—É –¥–≤—É–º—è —Å—É—â–Ω–æ—Å—Ç—è–º–∏
func (gh *GameHandlerPB) checkEntityEntityCollision(entity *entity.Entity, newPos vec.Vec2Float, other *entity.Entity) bool {
	// –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ü–µ–Ω—Ç—Ä–∞–º–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π
	distance := newPos.DistanceTo(other.PrecisePos)

	// –°—É–º–º–∞ —Ä–∞–¥–∏—É—Å–æ–≤ (–ø–æ–ª—É—Ä–∞–∑–º–µ—Ä–æ–≤) —Å—É—â–Ω–æ—Å—Ç–µ–π
	radiusSum := (entity.Size.X + other.Size.X) / 2

	// –ï—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—å—à–µ —Å—É–º–º—ã —Ä–∞–¥–∏—É—Å–æ–≤, –µ—Å—Ç—å –∫–æ–ª–ª–∏–∑–∏—è
	return distance < radiusSum
}

// sendEntityMoveUpdate –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏
func (gh *GameHandlerPB) sendEntityMoveUpdate(entity *entity.Entity) {
	// –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
	entityData := &protocol.EntityData{
		Id:        entity.ID,
		Type:      protocol.EntityType(entity.Type),
		Position:  &protocol.Vec2{X: int32(entity.Position.X), Y: int32(entity.Position.Y)},
		Direction: int32(entity.Direction),
		Active:    entity.Active,
	}

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
	moveMsg := &protocol.EntityMoveMessage{
		Entities: []*protocol.EntityData{entityData},
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º, –∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å—É—â–Ω–æ—Å—Ç–∏
	gh.mu.RLock()
	playerConnID := ""
	for connID, entID := range gh.playerEntities {
		if entID == entity.ID {
			playerConnID = connID
			break
		}
	}
	gh.mu.RUnlock()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º, –∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
	for connID := range gh.tcpServer.connections {
		if connID != playerConnID {
			gh.sendTCPMessage(connID, protocol.MessageType_ENTITY_MOVE, moveMsg)
		}
	}
}

// sendEntityPositionCorrection –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É —Å—É—â–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
// —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –µ—ë —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
// –∫–ª–∏–µ–Ω—Ç–∞ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ (–∫–æ–ª–ª–∏–∑–∏—è, –Ω–µ–ø—Ä–æ—Ö–æ–¥–∏–º–∞—è –æ–±–ª–∞—Å—Ç—å –∏ —Ç.–ø.), —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç
// ¬´–æ—Ç–∫–∞—Ç–∏–ª—Å—è¬ª –∫ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.
func (gh *GameHandlerPB) sendEntityPositionCorrection(connID string, entity *entity.Entity) {
	if connID == "" || gh.tcpServer == nil {
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
	entityData := &protocol.EntityData{
		Id:        entity.ID,
		Type:      protocol.EntityType(entity.Type),
		Position:  &protocol.Vec2{X: int32(entity.Position.X), Y: int32(entity.Position.Y)},
		Active:    entity.Active,
		Direction: int32(entity.Direction),
		Velocity:  &protocol.Vec2Float{X: 0, Y: 0}, // –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±–Ω—É–ª—è–µ–º
	}

	// –°–æ–∑–¥–∞—ë–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	moveMsg := &protocol.EntityMoveMessage{Entities: []*protocol.EntityData{entityData}}
	gh.sendTCPMessage(connID, protocol.MessageType_ENTITY_MOVE, moveMsg)
}

// IsSessionValid –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ connID —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è.
// –ü–æ–¥—Ä–æ–±–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è JWT –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–¥–Ω–µ–µ; –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ª–æ–∂–Ω—ã—Ö
// –æ—Ç—Ä–∏—Ü–∞–Ω–∏–π –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–∫—Ç–∞ –Ω–∞–ª–∏—á–∏—è
// —Å–µ—Å—Å–∏–∏.
func (gh *GameHandlerPB) IsSessionValid(connID string) bool {
	gh.mu.RLock()
	_, ok := gh.sessions[connID]
	gh.mu.RUnlock()
	return ok
}

// handleAuth –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GameAuthenticator
func (gh *GameHandlerPB) handleAuth(connID string, msg *protocol.GameMessage) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ GameAuthenticator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
	if gh.gameAuth == nil {
		log.Printf("‚ùå GameAuthenticator –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
		resp := &protocol.AuthResponseMessage{Success: false, Message: "Server authentication error"}
		gh.sendTCPMessage(connID, protocol.MessageType_AUTH_RESPONSE, resp)
		return
	}

	authMsg := &protocol.AuthMessage{}
	if err := gh.serializer.DeserializePayload(msg, authMsg); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Auth: %v", err)
		resp := &protocol.AuthResponseMessage{Success: false, Message: "Invalid request format"}
		gh.sendTCPMessage(connID, protocol.MessageType_AUTH_RESPONSE, resp)
		return
	}

	// –ï—Å–ª–∏ —É–∂–µ –∏–º–µ–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω–∞—è —Å–µ—Å—Å–∏—è ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
	if gh.IsSessionValid(connID) {
		log.Printf("‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç %s –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è", connID)
		return
	}

	// === –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –° GAME AUTHENTICATOR ===
	// –í—ã–ø–æ–ª–Ω—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ GameAuthenticator
	password := ""
	if authMsg.Password != nil {
		password = *authMsg.Password
	}

	authResult, err := gh.gameAuth.AuthenticateUser(authMsg.Username, password)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: %v", err)
		resp := &protocol.AuthResponseMessage{Success: false, Message: "Authentication service error"}
		gh.sendTCPMessage(connID, protocol.MessageType_AUTH_RESPONSE, resp)
		return
	}

	// –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
	if !authResult.Success {
		log.Printf("‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è %s: %s", authMsg.Username, authResult.Message)
		authResp := &protocol.AuthResponseMessage{
			Success: false,
			Message: authResult.Message,
		}
		gh.sendTCPMessage(connID, protocol.MessageType_AUTH_RESPONSE, authResp)
		return
	}

	// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
	username := authMsg.Username

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	isAdmin := false
	serverCapabilities := make([]string, 0)
	if len(authResult.Roles) > 0 {
		for _, role := range authResult.Roles {
			serverCapabilities = append(serverCapabilities, role)
			if role == "admin" {
				isAdmin = true
			}
		}
	}

	// –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å—É—â–Ω–æ—Å—Ç—å
	var entityID uint64
	gh.mu.Lock()
	if existingEntityID, exists := gh.playerEntities[connID]; !exists {
		// –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º gh.generateEntityID() –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã —É–∂–µ –≤ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ!
		gh.lastEntityID++
		entityID = gh.lastEntityID
		gh.playerEntities[connID] = entityID

		// –°–æ–∑–¥–∞–µ–º AuthResponse —Å JWT —Ç–æ–∫–µ–Ω–æ–º
		authResp := &protocol.AuthResponseMessage{
			Success:   true,
			Message:   authResult.Message,
			PlayerId:  entityID,
			JwtToken:  &authResult.Token,
			WorldName: "main_world",
			ServerInfo: &protocol.ServerInfo{
				Version:     "1.0.0",
				Environment: "development",
			},
		}

		gh.sessions[connID] = &Session{
			UserID:   authResult.UserID, // –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
			EntityID: entityID,          // –í—Ä–µ–º–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—É—â–Ω–æ—Å—Ç–∏
			Username: username,
			Token:    authResult.Token,
			IsAdmin:  isAdmin,
		}

		log.Printf("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–æ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å %d –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", entityID, username)

		// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
		var spawnPos vec.Vec2
		if gh.positionRepo != nil {
			if savedPos, found, err := gh.positionRepo.Load(context.Background(), authResult.UserID); err != nil {
				log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", authResult.UserID, err)
				defaultPos := gh.GetDefaultSpawnPosition()
				spawnPos = defaultPos.ToVec2()
			} else if found {
				log.Printf("üìç –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è %s: (%d, %d, %d)", username, savedPos.X, savedPos.Y, savedPos.Z)
				spawnPos = savedPos.ToVec2()
			} else {
				log.Printf("üÜï –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–ø–∞–≤–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", username)
				defaultPos := gh.GetDefaultSpawnPosition()
				spawnPos = defaultPos.ToVec2()
			}
		} else {
			log.Printf("‚ö†Ô∏è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–ø–∞–≤–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
			defaultPos := gh.GetDefaultSpawnPosition()
			spawnPos = defaultPos.ToVec2()
		}

		// –°–æ–∑–¥–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –º–∏—Ä–µ
		gh.spawnEntityWithID(entity.EntityTypePlayer, spawnPos, entityID)

		// –°–≤—è–∑—ã–≤–∞–µ–º TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å playerID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
		if gh.tcpServer != nil {
			gh.tcpServer.mu.Lock()
			if conn, ok := gh.tcpServer.connections[connID]; ok {
				conn.playerID = entityID
			}
			gh.tcpServer.mu.Unlock()
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
		log.Printf("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è %s (ID: %d)", username, entityID)
		gh.sendTCPMessage(connID, protocol.MessageType_AUTH_RESPONSE, authResp)

	} else {
		entityID = existingEntityID
		log.Printf("‚ö†Ô∏è –ò–≥—Ä–æ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è %s", connID)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
		authResp := &protocol.AuthResponseMessage{
			Success:   true,
			Message:   "Already authenticated",
			PlayerId:  entityID,
			JwtToken:  &authResult.Token,
			WorldName: "main_world",
		}
		gh.sendTCPMessage(connID, protocol.MessageType_AUTH_RESPONSE, authResp)
	}
	gh.mu.Unlock()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∏—Ä–∞
	if entityID, exists := gh.playerEntities[connID]; exists {
		gh.sendWorldDataToPlayer(connID, entityID)
	}
}

// handleBlockUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞
func (gh *GameHandlerPB) handleBlockUpdate(connID string, msg *protocol.GameMessage) {
	blockUpdate := &protocol.BlockUpdateRequest{}
	if err := gh.serializer.DeserializePayload(msg, blockUpdate); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BlockUpdate: %v", err)
		return
	}

	// === –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===
	if blockUpdate.Position == nil {
		log.Printf("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞: –ø–æ–∑–∏—Ü–∏—è nil")
		return
	}

	pos := vec.Vec2{X: int(blockUpdate.Position.X), Y: int(blockUpdate.Position.Y)}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
	gh.mu.RLock()
	playerEntityID, exists := gh.playerEntities[connID]
	gh.mu.RUnlock()

	if !exists {
		log.Printf("‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –±–ª–æ–∫: %s", connID)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
	playerEntity, exists := gh.entityManager.GetEntity(playerEntityID)
	if !exists || playerEntity == nil {
		log.Printf("‚ùå –°—É—â–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: %d", playerEntityID)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –±–ª–æ–∫–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç —á–∏—Ç–æ–≤)
	blockPosFloat := vec.Vec2Float{X: float64(pos.X), Y: float64(pos.Y)}
	distance := playerEntity.PrecisePos.DistanceTo(blockPosFloat)
	const maxReachDistance = 10.0 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
	if distance > maxReachDistance {
		log.Printf("‚ùå –ò–≥—Ä–æ–∫ %d –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –±–ª–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ: %.2f > %.2f",
			playerEntityID, distance, maxReachDistance)
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è ID –±–ª–æ–∫–∞
	if blockUpdate.BlockId > 1000 { // –†–∞–∑—É–º–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è ID –±–ª–æ–∫–∞
		log.Printf("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π ID –±–ª–æ–∫–∞: %d", blockUpdate.BlockId)
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
	if blockUpdate.Metadata != nil && len(blockUpdate.Metadata.JsonData) > 1024 {
		log.Printf("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞: %d –±–∞–π—Ç", len(blockUpdate.Metadata.JsonData))
		return
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–∫—Ç–∏–≤–Ω—ã–π)
	layer := world.LayerActive
	if blockUpdate.Layer == protocol.BlockLayer_FLOOR {
		layer = world.LayerFloor
	} else if blockUpdate.Layer == protocol.BlockLayer_CEILING {
		layer = world.LayerCeiling
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–ª–æ–µ
	oldBlock := gh.worldManager.GetBlockLayer(pos, layer)
	currentBehavior, _ := block.Get(oldBlock.ID)

	// actionPayload –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
	var actionPayload map[string]interface{}
	if blockUpdate.Metadata != nil && blockUpdate.Metadata.JsonData != "" {
		actionPayload, _ = protocol.JsonToMap(blockUpdate.Metadata.JsonData)
	}

	action := blockUpdate.Action
	if action == "" {
		action = "place"
	}

	var newID block.BlockID
	var newPayload map[string]interface{}
	var result block.InteractionResult

	switch action {
	case "place":
		newID = block.BlockID(blockUpdate.BlockId)
		newBehavior, _ := block.Get(newID)
		newPayload = make(map[string]interface{})
		if newBehavior != nil {
			newPayload = newBehavior.CreateMetadata()
		}
		result = block.InteractionResult{Success: true}

	case "mine", "break":
		// OnBreak –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ WorldManager –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –±–ª–æ–∫–∞
		newID = block.AirBlockID
		newPayload = nil
		result = block.InteractionResult{Success: true}

	default: // use / custom
		if currentBehavior != nil {
			newID, newPayload, result = currentBehavior.HandleInteraction(action, oldBlock.Payload, actionPayload)
		} else {
			result = block.InteractionResult{Success: false, Message: "No behavior"}
			newID = oldBlock.ID
			newPayload = oldBlock.Payload
		}
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–ª–æ–µ
	blockObj := world.NewBlock(newID)
	blockObj.Payload = newPayload
	gh.worldManager.SetBlockLayer(pos, layer, blockObj)

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	metaStr, _ := protocol.MapToJsonMetadata(newPayload)
	respMeta := &protocol.JsonMetadata{JsonData: metaStr}
	response := &protocol.BlockUpdateResponseMessage{
		Success:  result.Success,
		Message:  result.Message,
		BlockId:  uint32(newID),
		Position: blockUpdate.Position,
		Layer:    blockUpdate.Layer,
		Metadata: respMeta,
		Effects:  result.Effects,
	}

	gh.sendTCPMessage(connID, protocol.MessageType_BLOCK_UPDATE_RESPONSE, response)
}

// handleChunkBatchRequest –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–∞–∫–µ—Ç–∞ —á–∞–Ω–∫–æ–≤
func (gh *GameHandlerPB) handleChunkBatchRequest(connID string, msg *protocol.GameMessage) {
	batchReq := &protocol.ChunkBatchRequest{}
	if err := gh.serializer.DeserializePayload(msg, batchReq); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChunkBatchRequest: %v", err)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫ –≤ –ø–∞–∫–µ—Ç–µ
	for _, chunk := range batchReq.Chunks {
		gh.sendChunkToClient(connID, int(chunk.X), int(chunk.Y))
	}
}

// handleChunkRequest –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —á–∞–Ω–∫–∞
func (gh *GameHandlerPB) handleChunkRequest(connID string, msg *protocol.GameMessage) {
	chunkRequest := &protocol.ChunkRequest{}
	if err := gh.serializer.DeserializePayload(msg, chunkRequest); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChunkRequest: %v", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
	gh.mu.RLock()
	_, exists := gh.playerEntities[connID]
	gh.mu.RUnlock()

	if !exists {
		log.Printf("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–∞–Ω–∫: %s", connID)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫ –∫–ª–∏–µ–Ω—Ç—É
	gh.sendChunkToClient(connID, int(chunkRequest.ChunkX), int(chunkRequest.ChunkY))
}

// sendChunkToClient –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–∞–Ω–∫ –∫–ª–∏–µ–Ω—Ç—É
func (gh *GameHandlerPB) sendChunkToClient(connID string, chunkX, chunkY int) {
	// –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 40‚Äì60 –º—Å –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞
	jitter := 40 + rand.Intn(21) // 40..60
	time.Sleep(time.Duration(jitter) * time.Millisecond)

	// –ü–æ–ª—É—á–∞–µ–º —á–∞–Ω–∫ –∏–∑ –º–∏—Ä–∞
	chunkPos := vec.Vec2{X: chunkX, Y: chunkY}
	chunk := gh.worldManager.GetChunk(chunkPos)

	// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —á–∞–Ω–∫ –≤ Protocol Buffers (–º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–∞—è —Å—Ö–µ–º–∞)
	chunkData := &protocol.ChunkData{
		ChunkX: int32(chunkX),
		ChunkY: int32(chunkY),
	}

	crc := crc32.NewIEEE()
	nonEmpty := 0

	// –°–ª–æ–∏: FLOOR –∏ ACTIVE
	layers := []*protocol.ChunkLayer{}
	for _, layerID := range []world.BlockLayer{world.LayerFloor, world.LayerActive} {
		layerMsg := &protocol.ChunkLayer{Layer: uint32(layerID), Rows: make([]*protocol.BlockRow, 16)}
		for blockY := 0; blockY < 16; blockY++ {
			row := make([]uint32, 16)
			for blockX := 0; blockX < 16; blockX++ {
				bID := uint32(chunk.GetBlockLayer(layerID, vec.Vec2{X: blockX, Y: blockY}))
				row[blockX] = bID
				_ = binary.Write(crc, binary.LittleEndian, bID)
				if bID != 0 {
					nonEmpty++
				}
			}
			layerMsg.Rows[blockY] = &protocol.BlockRow{BlockIds: row}
		}
		layers = append(layers, layerMsg)
	}
	chunkData.Layers = layers

	// –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤
	blockMetadata := &protocol.ChunkBlockMetadata{BlockMetadata: make(map[string]*protocol.JsonMetadata)}

	// –ó–∞–ø–æ–ª–Ω—è–µ–º blockMetadata –∏–∑ –¥–∞–Ω–Ω—ã—Ö —á–∞–Ω–∫–∞ (—Ç–æ–ª—å–∫–æ —Å–ª–æ–π ACTIVE)
	for coord, metadata := range chunk.Metadata3D {
		if coord.Layer == world.LayerActive && len(metadata) > 0 {
			jsonStr, err := protocol.MapToJsonMetadata(metadata)
			if err == nil {
				key := fmt.Sprintf("%d:%d", coord.Pos.X, coord.Pos.Y)
				blockMetadata.BlockMetadata[key] = &protocol.JsonMetadata{JsonData: jsonStr}
			}
		}
	}

	// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
	metaMap := map[string]interface{}{
		"checksum": crc.Sum32(),
		"nonEmpty": nonEmpty,
	}
	if len(blockMetadata.BlockMetadata) > 0 {
		metaMap["blockMetadata"] = blockMetadata
	}

	metadataJson, errMeta := protocol.MapToJsonMetadata(metaMap)
	if errMeta == nil {
		chunkData.Metadata = &protocol.JsonMetadata{JsonData: metadataJson}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫
	gh.sendTCPMessage(connID, protocol.MessageType_CHUNK_DATA, chunkData)
}

// handleEntityAction –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å—É—â–Ω–æ—Å—Ç–∏
func (gh *GameHandlerPB) handleEntityAction(connID string, msg *protocol.GameMessage) {
	action := &protocol.EntityActionRequest{}
	if err := gh.serializer.DeserializePayload(msg, action); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ EntityAction: %v", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
	gh.mu.RLock()
	entityID, exists := gh.playerEntities[connID]
	gh.mu.RUnlock()

	if !exists {
		log.Printf("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ: %s", connID)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏
	_, exists = gh.entityManager.GetEntity(entityID)
	if !exists {
		log.Printf("–°—É—â–Ω–æ—Å—Ç—å %d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", entityID)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
	success, message, shouldBroadcast := gh.processEntityAction(entityID, action)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
	response := &protocol.EntityActionResponse{
		Success: success,
		Message: message,
	}

	gh.sendTCPMessage(connID, protocol.MessageType_ENTITY_ACTION_RESPONSE, response)

	// –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –∏ —Ç—Ä–µ–±—É–µ—Ç —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏, –æ–ø–æ–≤–µ—â–∞–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
	if success && shouldBroadcast {
		gh.broadcastMessage(protocol.MessageType_ENTITY_ACTION, action)
	}
}

// handleEntityMove –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏
func (gh *GameHandlerPB) handleEntityMove(connID string, msg *protocol.GameMessage) {
	// –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
	moveMsg := &protocol.EntityMoveMessage{}
	if err := gh.serializer.DeserializePayload(msg, moveMsg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ EntityMove: %v", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
	gh.mu.RLock()
	ownerID, ok := gh.playerEntities[connID]
	gh.mu.RUnlock()
	if !ok {
		log.Printf("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏: %s", connID)
		return
	}

	// –î–ª—è –∫–∞–∂–¥–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
	for _, ed := range moveMsg.Entities {
		// –ü–æ–∫–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–º–µ—â–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å
		if ed.Id != ownerID {
			log.Printf("–ò–≥—Ä–æ–∫ %d –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —á—É–∂—É—é —Å—É—â–Ω–æ—Å—Ç—å %d", ownerID, ed.Id)
			continue
		}

		ent, exists := gh.entityManager.GetEntity(ed.Id)
		if !exists {
			log.Printf("–°—É—â–Ω–æ—Å—Ç—å %d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", ed.Id)
			continue
		}

		// –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
		targetPos := vec.Vec2{
			X: int(ed.Position.X),
			Y: int(ed.Position.Y),
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –ª–æ–≥–∏–∫–∏
		if !gh.isPositionWalkable(targetPos) {
			log.Printf("–°—É—â–Ω–æ—Å—Ç—å %d –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –Ω–µ–ø—Ä–æ—Ö–æ–¥–∏–º—É—é –ø–æ–∑–∏—Ü–∏—é (%d,%d)", ed.Id, targetPos.X, targetPos.Y)
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–∞—Ç–∏–ª –ø–æ–∑–∏—Ü–∏—é
			gh.sendEntityPositionCorrection(connID, ent)
			continue
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
		oldPos := ent.PrecisePos
		ent.PrecisePos = vec.Vec2Float{X: float64(targetPos.X), Y: float64(targetPos.Y)}
		ent.Position = targetPos

		// –°–æ–æ–±—â–∞–µ–º worldManager –æ —Å–º–µ–Ω–µ BigChunk
		gh.worldManager.ProcessEntityMovement(ent.ID, vec.Vec2{X: int(oldPos.X), Y: int(oldPos.Y)}, targetPos)

		// –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º
		gh.sendEntityMoveUpdate(ent)
	}
}

// handleChat –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
func (gh *GameHandlerPB) handleChat(connID string, msg *protocol.GameMessage) {
	// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
	log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞ –æ—Ç %s", connID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
	gh.mu.RLock()
	entityID, exists := gh.playerEntities[connID]
	session, sessionExists := gh.sessions[connID]
	gh.mu.RUnlock()

	if !exists || !sessionExists {
		log.Printf("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", connID)
		return
	}

	playerName := session.Username

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º
	gh.broadcastMessage(protocol.MessageType_CHAT_BROADCAST, &protocol.ChatBroadcastMessage{
		Type:       protocol.ChatType_CHAT_GLOBAL,
		Message:    "–ß–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω",
		SenderId:   entityID,
		SenderName: playerName,
		Timestamp:  time.Now().UnixNano(),
	})
}

// sendWorldDataToPlayer –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–∏—Ä–µ –∏–≥—Ä–æ–∫—É
func (gh *GameHandlerPB) sendWorldDataToPlayer(connID string, playerID uint64) {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ —á–∞–Ω–∫–∏
	gh.sendInitialChunks(connID, playerID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–µ–¥–µ–Ω–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–∏—Ä–∞
	worldData := map[string]interface{}{
		"time_of_day": 0.5,
		"weather":     "clear",
		"season":      "summer",
		"game_mode":   "survival",
		"world_id":    1234,
		"world_name":  "default",
	}

	// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ JSON
	jsonData, err := json.Marshal(worldData)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–∏—Ä–∞: %v", err)
		return
	}

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–∏—Ä–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
	worldMetadata := &protocol.JsonMetadata{
		JsonData: string(jsonData),
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–∏—Ä–∞ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
	gh.sendTCPMessage(connID, protocol.MessageType_CHUNK_DATA, worldMetadata)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–∞—Ö –≤ –∑–æ–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏
	// –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞
	playerEntity, exists := gh.entityManager.GetEntity(playerID)
	if !exists {
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
	nearbyEntities := gh.GetEntitiesInRange(playerEntity.Position, 100.0)

	// –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
	var spawnedEntities []*protocol.EntityData

	for _, entity := range nearbyEntities {
		if entity.ID == playerID {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å
		}

		entityData := &protocol.EntityData{
			Id:        entity.ID,
			Type:      protocol.EntityType(entity.Type),
			Position:  &protocol.Vec2{X: int32(entity.Position.X), Y: int32(entity.Position.Y)},
			Direction: int32(entity.Direction),
			Active:    entity.Active,
		}

		// –ï—Å–ª–∏ —ç—Ç–æ —Å—É—â–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è
		if int(entity.Type) == 0 { // EntityTypePlayer = 0 in entity package
			gh.mu.RLock()
			// –ò—â–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞ –ø–æ entityID –≤ sessions
			var username string
			for _, session := range gh.sessions {
				if session.EntityID == entity.ID {
					username = session.Username
					break
				}
			}
			gh.mu.RUnlock()

			if username != "" {
				// –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –≤ –∞—Ç—Ä–∏–±—É—Ç—ã —Å—É—â–Ω–æ—Å—Ç–∏
				entityData.Attributes = &protocol.JsonMetadata{
					JsonData: `{"username": "` + username + `"}`,
				}
			}
		}

		spawnedEntities = append(spawnedEntities, entityData)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—É—â–Ω–æ—Å—Ç—è—Ö –≤ –∑–æ–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏
	if len(spawnedEntities) > 0 {
		spawnMsg := &protocol.EntityMoveMessage{
			Entities: spawnedEntities,
		}

		gh.sendTCPMessage(connID, protocol.MessageType_ENTITY_MOVE, spawnMsg)
	}
}

// sendInitialChunks –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ —á–∞–Ω–∫–∏ –∏–≥—Ä–æ–∫—É
func (gh *GameHandlerPB) sendInitialChunks(connID string, playerID uint64) {
	// –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞
	playerEntity, exists := gh.entityManager.GetEntity(playerID)
	if !exists {
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–∞–Ω–∫–∞ –∏–≥—Ä–æ–∫–∞
	playerChunkCoords := playerEntity.Position.ToChunkCoords()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫–∏ –≤ —Ä–∞–¥–∏—É—Å–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ (5 —á–∞–Ω–∫–æ–≤)
	chunkRadius := 5

	for x := playerChunkCoords.X - chunkRadius; x <= playerChunkCoords.X+chunkRadius; x++ {
		for y := playerChunkCoords.Y - chunkRadius; y <= playerChunkCoords.Y+chunkRadius; y++ {
			chunkPos := vec.Vec2{X: x, Y: y}

			// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞–Ω–∫–∞ –∏–∑ –º–∏—Ä–∞
			chunk := gh.worldManager.GetChunk(chunkPos)
			if chunk == nil {
				continue
			}

			// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞–Ω–∫–∞ –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
			chunkData := &protocol.ChunkData{
				ChunkX: int32(x),
				ChunkY: int32(y),
			}

			// –°–ª–æ–∏: FLOOR –∏ ACTIVE
			layers := []*protocol.ChunkLayer{}
			for _, layerID := range []world.BlockLayer{world.LayerFloor, world.LayerActive} {
				layerMsg := &protocol.ChunkLayer{Layer: uint32(layerID), Rows: make([]*protocol.BlockRow, 16)}
				for blockY := 0; blockY < 16; blockY++ {
					row := make([]uint32, 16)
					for blockX := 0; blockX < 16; blockX++ {
						bID := uint32(chunk.GetBlockLayer(layerID, vec.Vec2{X: blockX, Y: blockY}))
						row[blockX] = bID
					}
					layerMsg.Rows[blockY] = &protocol.BlockRow{BlockIds: row}
				}
				layers = append(layers, layerMsg)
			}
			chunkData.Layers = layers

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞–Ω–∫–∞
			gh.sendTCPMessage(connID, protocol.MessageType_CHUNK_DATA, chunkData)

			// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
			time.Sleep(10 * time.Millisecond)
		}
	}
}

// sendWorldUpdates –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
func (gh *GameHandlerPB) sendWorldUpdates() {
	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞–º
	// –ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ –µ–≥–æ –∑–æ–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏
	gh.mu.RLock()
	playerConnections := make(map[string]uint64)
	for connID, playerID := range gh.playerEntities {
		playerConnections[connID] = playerID
	}
	gh.mu.RUnlock()

	// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–∏–º—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
	for connID, playerID := range playerConnections {
		// –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞
		playerEntity, exists := gh.entityManager.GetEntity(playerID)
		if !exists {
			continue
		}

		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–¥–∏—É—Å–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–≥—Ä–æ–∫–∞
		// (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–¥–∏—É—Å 100 –±–ª–æ–∫–æ–≤ –∫–∞–∫ –∑–æ–Ω—É –≤–∏–¥–∏–º–æ—Å—Ç–∏)
		visibleEntities := gh.GetEntitiesInRange(playerEntity.Position, 100.0)

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
		entityDataList := make([]*protocol.EntityData, 0, len(visibleEntities))

		for _, entity := range visibleEntities {
			// –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
			if entity.ID == playerID {
				continue
			}

			// –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
			entityData := &protocol.EntityData{
				Id:        entity.ID,
				Type:      protocol.EntityType(entity.Type),
				Position:  &protocol.Vec2{X: int32(entity.Position.X), Y: int32(entity.Position.Y)},
				Direction: int32(entity.Direction),
				Active:    entity.Active,
			}

			// –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
			if entity.Velocity.X != 0 || entity.Velocity.Y != 0 {
				entityData.Velocity = &protocol.Vec2Float{
					X: float32(entity.Velocity.X),
					Y: float32(entity.Velocity.Y),
				}
			}

			entityDataList = append(entityDataList, entityData)
		}

		// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
		// –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –ø—É—Å—Ç—ã—Ö ENTITY_MOVE —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–π —Ç–∏–∫
		if len(entityDataList) > 0 {
			updateMsg := &protocol.EntityMoveMessage{
				Entities: entityDataList,
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å—É—â–Ω–æ—Å—Ç–µ–π)
			log.Printf("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ ENTITY_MOVE –∫–ª–∏–µ–Ω—Ç—É %s: %d —Å—É—â–Ω–æ—Å—Ç–µ–π", connID, len(entityDataList))
			maxLog := len(entityDataList)
			if maxLog > 3 { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –¥–æ 3 —Å—É—â–Ω–æ—Å—Ç–µ–π
				maxLog = 3
			}
			for i := 0; i < maxLog; i++ {
				entityData := entityDataList[i]
				log.Printf("  [%d] Entity ID=%d, Type=%v, Pos=(%d,%d)",
					i, entityData.Id, entityData.Type, entityData.Position.X, entityData.Position.Y)
			}
			if len(entityDataList) > maxLog {
				log.Printf("  ... –∏ –µ—â–µ %d —Å—É—â–Ω–æ—Å—Ç–µ–π", len(entityDataList)-maxLog)
			}

			gh.sendTCPMessage(connID, protocol.MessageType_ENTITY_MOVE, updateMsg)
		} else {
			// –õ–æ–≥–∏—Ä—É–µ–º —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è (—Ä–µ–∂–µ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Å–ø–∞–º–∞)
			if gh.tickCounter%100 == 0 { // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 100 —Ç–∏–∫–æ–≤ = —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥
				log.Printf("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ ENTITY_MOVE –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ %s: –Ω–µ—Ç —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤—Å–µ–≥–æ –≤–∏–¥–∏–º—ã—Ö: %d)", connID, len(visibleEntities))
			}
		}
	}
}

// SpawnEntity —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å EntityAPI - –∏–∑–º–µ–Ω—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É
func (gh *GameHandlerPB) SpawnEntity(entityType entity.EntityType, position vec.Vec2) uint64 {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è –Ω–æ–≤–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
	entityID := gh.generateEntityID()

	// –í—ã–∑—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
	return gh.spawnEntityWithID(entityType, position, entityID)
}

// spawnEntityWithID - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
func (gh *GameHandlerPB) spawnEntityWithID(entityType entity.EntityType, position vec.Vec2, entityID uint64) uint64 {
	log.Printf("–°–æ–∑–¥–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ —Ç–∏–ø–∞ %d —Å ID %d –≤ –ø–æ–∑–∏—Ü–∏–∏ (%d, %d)",
		entityType, entityID, position.X, position.Y)

	// === 1. –†–µ–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞—ë–º —Å—É—â–Ω–æ—Å—Ç—å –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ EntityManager ===
	newEntity := entity.NewEntity(entityID, entityType, position)
	gh.entityManager.AddEntity(newEntity)

	// === 2. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ ===
	if behavior, ok := gh.entityManager.GetBehavior(entityType); ok {
		behavior.OnSpawn(gh, newEntity)
	}

	// === 3. –®–ª—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º ===
	entityData := &protocol.EntityData{
		Id:       entityID,
		Type:     protocol.EntityType(entityType),
		Position: &protocol.Vec2{X: int32(position.X), Y: int32(position.Y)},
		Active:   true,
	}

	entitySpawn := &protocol.EntitySpawnMessage{
		Entity: entityData,
	}

	gh.broadcastMessage(protocol.MessageType_ENTITY_SPAWN, entitySpawn)

	return entityID
}

// DespawnEntity —É–¥–∞–ª—è–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å –∏–∑ –º–∏—Ä–∞
func (gh *GameHandlerPB) DespawnEntity(entityID uint64) {
	// –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–æ –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
	log.Printf("–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ —Å ID %d", entityID)

	// –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
	despawnMsg := &protocol.EntityDespawnMessage{
		EntityId: entityID,
		Reason:   "deleted",
	}
	gh.broadcastMessage(protocol.MessageType_ENTITY_DESPAWN, despawnMsg)
}

// SendBlockUpdate –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
func (gh *GameHandlerPB) SendBlockUpdate(blockPos vec.Vec2, block world.Block) {
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–ª–æ–∫–∞
	blockData := &protocol.BlockData{
		Position: &protocol.Vec2{
			X: int32(blockPos.X),
			Y: int32(blockPos.Y),
		},
		BlockId: uint32(block.ID),
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
	if block.Payload != nil && len(block.Payload) > 0 {
		jsonStr, err := protocol.MapToJsonMetadata(block.Payload)
		if err == nil {
			blockData.Metadata = &protocol.JsonMetadata{
				JsonData: jsonStr,
			}
		}
	}

	blockUpdate := &protocol.BlockUpdateMessage{
		Blocks: []*protocol.BlockData{blockData},
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
	gh.broadcastMessage(protocol.MessageType_BLOCK_UPDATE, blockUpdate)
}

// broadcastMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
func (gh *GameHandlerPB) broadcastMessage(msgType protocol.MessageType, payload proto.Message) {
	if gh.tcpServer != nil {
		gh.tcpServer.broadcastMessage(msgType, payload)
	}
}

// sendTCPMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ TCP
func (gh *GameHandlerPB) sendTCPMessage(connID string, msgType protocol.MessageType, payload proto.Message) {
	if gh.tcpServer != nil {
		gh.tcpServer.sendToClient(connID, msgType, payload)
	}
}

// generateEntityID –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–∏
func (gh *GameHandlerPB) generateEntityID() uint64 {
	gh.mu.Lock()
	defer gh.mu.Unlock()

	gh.lastEntityID++
	return gh.lastEntityID
}

// SendMessage —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å EntityAPI
func (gh *GameHandlerPB) SendMessage(entityID uint64, messageType string, data interface{}) {
	// –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å —ç—Ç–æ–π —Å—É—â–Ω–æ—Å—Ç—å—é
	var connID string

	gh.mu.RLock()
	for cid, eid := range gh.playerEntities {
		if eid == entityID {
			connID = cid
			break
		}
	}
	gh.mu.RUnlock()

	if connID == "" {
		return // –°—É—â–Ω–æ—Å—Ç—å –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
	log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞ %s –∏–≥—Ä–æ–∫—É %s", messageType, connID)
}

// isPositionWalkable –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É —Å–ª–æ—ë–≤: —Å–Ω–∞—á–∞–ª–∞ ACTIVE, –∑–∞—Ç–µ–º FLOOR.
func (gh *GameHandlerPB) isPositionWalkable(pos vec.Vec2) bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º ACTIVE —Å–ª–æ–π
	activeBlock := gh.worldManager.GetBlockLayer(pos, world.LayerActive)

	passable := func(id block.BlockID) bool {
		if behavior, exists := block.Get(id); exists {
			if p, ok := behavior.(interface{ IsPassable() bool }); ok {
				return p.IsPassable()
			}
		}
		return id == block.AirBlockID
	}

	if !passable(activeBlock.ID) {
		return false
	}

	// –ï—Å–ª–∏ ACTIVE ‚Äì –≤–æ–∑–¥—É—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º FLOOR –∫–∞–∫ ¬´–æ–ø–æ—Ä—É¬ª
	if activeBlock.ID == block.AirBlockID {
		floorBlock := gh.worldManager.GetBlockLayer(pos, world.LayerFloor)
		if floorBlock.ID == block.AirBlockID {
			return false // –ø—Ä–æ–ø–∞—Å—Ç—å
		}
	}

	return true
}

// processEntityAction –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π —Å—É—â–Ω–æ—Å—Ç–∏
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: success, message, shouldBroadcast
func (gh *GameHandlerPB) processEntityAction(actorID uint64, action *protocol.EntityActionRequest) (bool, string, bool) {
	// –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∞–∫—Ç–æ—Ä–∞
	actor, exists := gh.entityManager.GetEntity(actorID)
	if !exists {
		return false, "–°—É—â–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", false
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
	switch action.ActionType {
	case protocol.EntityActionType_ACTION_INTERACT:
		return gh.handleInteractAction(actor, action)

	case protocol.EntityActionType_ACTION_ATTACK:
		return gh.handleAttackAction(actor, action)

	case protocol.EntityActionType_ACTION_USE_ITEM:
		return gh.handleUseItemAction(actor, action)

	case protocol.EntityActionType_ACTION_PICKUP:
		return gh.handlePickupAction(actor, action)

	case protocol.EntityActionType_ACTION_DROP:
		return gh.handleDropAction(actor, action)

	case protocol.EntityActionType_ACTION_BUILD_PLACE:
		return gh.handleBuildPlaceAction(actor, action)

	case protocol.EntityActionType_ACTION_BUILD_BREAK:
		return gh.handleBuildBreakAction(actor, action)

	case protocol.EntityActionType_ACTION_EMOTE:
		return gh.handleEmoteAction(actor, action)

	case protocol.EntityActionType_ACTION_RESPAWN:
		return gh.handleRespawnAction(actor, action)

	default:
		return false, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è", false
	}
}

// handleInteractAction –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
func (gh *GameHandlerPB) handleInteractAction(actor *entity.Entity, action *protocol.EntityActionRequest) (bool, string, bool) {
	// –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ª–µ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å
	if action.TargetId != nil {
		target, exists := gh.entityManager.GetEntity(*action.TargetId)
		if !exists {
			return false, "–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", false
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
		distance := gh.calculateDistance(actor.Position, target.Position)
		if distance > 3.0 { // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
			return false, "–°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ", false
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π
		switch target.Type {
		case entity.EntityTypeNPC:
			return true, "–†–∞–∑–≥–æ–≤–æ—Ä —Å NPC", true
		case entity.EntityTypePlayer:
			return true, "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∏–≥—Ä–æ–∫–æ–º", true
		default:
			return false, "–ù–µ–ª—å–∑—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º –æ–±—ä–µ–∫—Ç–æ–º", false
		}
	}

	// –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–ª–æ–∫–æ–º
	if action.Position != nil {
		blockPos := vec.Vec2{X: int(action.Position.X), Y: int(action.Position.Y)}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –±–ª–æ–∫–∞
		distance := gh.calculateDistance(actor.Position, blockPos)
		if distance > 3.0 {
			return false, "–°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ", false
		}

		blockData := gh.worldManager.GetBlock(blockPos)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–ª–æ–∫–æ–º
		if behavior, exists := block.Get(blockData.ID); exists {
			if interactable, ok := behavior.(interface{ IsInteractable() bool }); ok {
				if interactable.IsInteractable() {
					return true, "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–ª–æ–∫–æ–º", true
				}
			}
		}

		return false, "–° —ç—Ç–∏–º –±–ª–æ–∫–æ–º –Ω–µ–ª—å–∑—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å", false
	}

	return false, "–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è", false
}

// handleAttackAction –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—Ç–∞–∫—É
func (gh *GameHandlerPB) handleAttackAction(actor *entity.Entity, action *protocol.EntityActionRequest) (bool, string, bool) {
	if action.TargetId == nil {
		return false, "–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ª—å –∞—Ç–∞–∫–∏", false
	}

	target, exists := gh.entityManager.GetEntity(*action.TargetId)
	if !exists {
		return false, "–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∞—Ç–∞–∫–∏
	distance := gh.calculateDistance(actor.Position, target.Position)
	attackRange := 2.0 // –ë–∞–∑–æ–≤–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏

	if distance > attackRange {
		return false, "–°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –¥–ª—è –∞—Ç–∞–∫–∏", false
	}

	// –ù–µ–ª—å–∑—è –∞—Ç–∞–∫–æ–≤–∞—Ç—å —Å–µ–±—è
	if actor.ID == target.ID {
		return false, "–ù–µ–ª—å–∑—è –∞—Ç–∞–∫–æ–≤–∞—Ç—å —Å–µ–±—è", false
	}

	// –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
	damage := 10

	// –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω –∫ —Ü–µ–ª–∏
	if behavior, ok := gh.entityManager.GetBehavior(target.Type); ok {
		if behavior.OnDamage(gh, target, damage, actor) {
			// –¶–µ–ª—å –ø–æ–ª—É—á–∏–ª–∞ —É—Ä–æ–Ω
			return true, "–ê—Ç–∞–∫–∞ —É—Å–ø–µ—à–Ω–∞", true
		} else {
			return false, "–ê—Ç–∞–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞", false
		}
	}

	return true, "–ê—Ç–∞–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", true
}

// handleUseItemAction –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
func (gh *GameHandlerPB) handleUseItemAction(actor *entity.Entity, action *protocol.EntityActionRequest) (bool, string, bool) {
	if action.ItemId == nil {
		return false, "–ù–µ —É–∫–∞–∑–∞–Ω –ø—Ä–µ–¥–º–µ—Ç", false
	}

	itemID := *action.ItemId

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É –∏–≥—Ä–æ–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)
	// –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
	switch itemID {
	case 1: // –ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è
		return true, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è", false
	case 2: // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
		return true, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", false
	default:
		return false, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç", false
	}
}

// handlePickupAction –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤
func (gh *GameHandlerPB) handlePickupAction(actor *entity.Entity, action *protocol.EntityActionRequest) (bool, string, bool) {
	if action.TargetId == nil {
		return false, "–ù–µ —É–∫–∞–∑–∞–Ω –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞", false
	}

	target, exists := gh.entityManager.GetEntity(*action.TargetId)
	if !exists {
		return false, "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–µ–¥–º–µ—Ç
	if target.Type != entity.EntityTypeItem {
		return false, "–≠—Ç–æ –Ω–µ –ø—Ä–µ–¥–º–µ—Ç", false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
	distance := gh.calculateDistance(actor.Position, target.Position)
	if distance > 2.0 {
		return false, "–°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ", false
	}

	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –º–∏—Ä–∞
	gh.DespawnEntity(target.ID)

	return true, "–ü—Ä–µ–¥–º–µ—Ç –ø–æ–¥–æ–±—Ä–∞–Ω", true
}

// handleDropAction –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
func (gh *GameHandlerPB) handleDropAction(actor *entity.Entity, action *protocol.EntityActionRequest) (bool, string, bool) {
	if action.ItemId == nil {
		return false, "–ù–µ —É–∫–∞–∑–∞–Ω –ø—Ä–µ–¥–º–µ—Ç", false
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è
	dropPos := actor.Position
	if action.Position != nil {
		dropPos = vec.Vec2{X: int(action.Position.X), Y: int(action.Position.Y)}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
		distance := gh.calculateDistance(actor.Position, dropPos)
		if distance > 2.0 {
			return false, "–°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ", false
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–Ω–∞ –ª–∏ –ø–æ–∑–∏—Ü–∏—è
	if !gh.isPositionWalkable(dropPos) {
		return false, "–ü–æ–∑–∏—Ü–∏—è –∑–∞–Ω—è—Ç–∞", false
	}

	// –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –º–∏—Ä–µ
	gh.SpawnEntity(entity.EntityTypeItem, dropPos)

	return true, "–ü—Ä–µ–¥–º–µ—Ç –≤—ã–±—Ä–æ—à–µ–Ω", true
}

// handleBuildPlaceAction –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤
func (gh *GameHandlerPB) handleBuildPlaceAction(actor *entity.Entity, action *protocol.EntityActionRequest) (bool, string, bool) {
	if action.Position == nil {
		return false, "–ù–µ —É–∫–∞–∑–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è", false
	}

	blockPos := vec.Vec2{X: int(action.Position.X), Y: int(action.Position.Y)}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
	distance := gh.calculateDistance(actor.Position, blockPos)
	if distance > 5.0 {
		return false, "–°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ", false
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–ª–æ–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–º–µ–Ω—å)
	blockID := block.StoneBlockID
	if action.ItemId != nil {
		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ ID –±–ª–æ–∫–∞
		blockID = block.BlockID(*action.ItemId)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –±–ª–æ–∫
	currentBlock := gh.worldManager.GetBlock(blockPos)
	if currentBlock.ID != block.AirBlockID {
		return false, "–ü–æ–∑–∏—Ü–∏—è –∑–∞–Ω—è—Ç–∞", false
	}

	// –†–∞–∑–º–µ—â–∞–µ–º –±–ª–æ–∫
	gh.worldManager.SetBlock(blockPos, world.NewBlock(blockID))

	return true, "–ë–ª–æ–∫ —Ä–∞–∑–º–µ—â—ë–Ω", true
}

// handleBuildBreakAction –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤
func (gh *GameHandlerPB) handleBuildBreakAction(actor *entity.Entity, action *protocol.EntityActionRequest) (bool, string, bool) {
	if action.Position == nil {
		return false, "–ù–µ —É–∫–∞–∑–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è", false
	}

	blockPos := vec.Vec2{X: int(action.Position.X), Y: int(action.Position.Y)}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
	distance := gh.calculateDistance(actor.Position, blockPos)
	if distance > 5.0 {
		return false, "–°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ", false
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
	currentBlock := gh.worldManager.GetBlock(blockPos)
	if currentBlock.ID == block.AirBlockID {
		return false, "–ù–µ—á–µ–≥–æ –ª–æ–º–∞—Ç—å", false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–ª–æ–º–∞—Ç—å –±–ª–æ–∫
	if behavior, exists := block.Get(currentBlock.ID); exists {
		if breakable, ok := behavior.(interface{ IsBreakable() bool }); ok {
			if !breakable.IsBreakable() {
				return false, "–ë–ª–æ–∫ –Ω–µ–ª—å–∑—è —Å–ª–æ–º–∞—Ç—å", false
			}
		}
	}

	// –õ–æ–º–∞–µ–º –±–ª–æ–∫
	gh.worldManager.SetBlock(blockPos, world.NewBlock(block.AirBlockID))

	// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
	gh.SpawnEntity(entity.EntityTypeItem, blockPos)

	return true, "–ë–ª–æ–∫ —Å–ª–æ–º–∞–Ω", true
}

// handleEmoteAction –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–º–æ—Ü–∏–∏
func (gh *GameHandlerPB) handleEmoteAction(actor *entity.Entity, action *protocol.EntityActionRequest) (bool, string, bool) {
	// –≠–º–æ—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É—é—Ç—Å—è –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º
	return true, "–≠–º–æ—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", true
}

// handleRespawnAction –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ
func (gh *GameHandlerPB) handleRespawnAction(actor *entity.Entity, action *protocol.EntityActionRequest) (bool, string, bool) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ
	if actor.Active {
		return false, "–ò–≥—Ä–æ–∫ —É–∂–µ –∂–∏–≤", false
	}

	// –í–æ–∑—Ä–æ–∂–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å–ø–∞–≤–Ω–µ
	spawnPos := gh.GetDefaultSpawnPosition()
	actor.Position = vec.Vec2{X: int(spawnPos.X), Y: int(spawnPos.Y)}
	actor.PrecisePos = vec.Vec2Float{X: float64(spawnPos.X), Y: float64(spawnPos.Y)}
	actor.Active = true

	return true, "–ò–≥—Ä–æ–∫ –≤–æ–∑—Ä–æ–∂–¥—ë–Ω", true
}

// calculateDistance –≤—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–∑–∏—Ü–∏—è–º–∏
func (gh *GameHandlerPB) calculateDistance(pos1, pos2 vec.Vec2) float64 {
	dx := float64(pos1.X - pos2.X)
	dy := float64(pos1.Y - pos2.Y)
	return math.Sqrt(dx*dx + dy*dy)
}
