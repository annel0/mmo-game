package network

import (
	"context"
	"errors"
	"fmt"
	"net"
	"sync"
	"time"

	"github.com/annel0/mmo-game/internal/logging"
	"github.com/annel0/mmo-game/internal/protocol"
	"github.com/xtaci/kcp-go/v5"
)

// ChannelServer –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä –∫–∞–Ω–∞–ª–æ–≤
type ChannelServer struct {
	addr     string
	listener net.Listener
	config   *ChannelConfig

	// –ö–ª–∏–µ–Ω—Ç—ã
	clients   map[string]*ClientChannel
	clientsMu sync.RWMutex

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	onConnect    func(clientID string, channel NetChannel)
	onDisconnect func(clientID string)
	onMessage    func(clientID string, msg *protocol.GameMessage)

	// –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
	converter *MessageConverter

	// –°–æ—Å—Ç–æ—è–Ω–∏–µ
	ctx    context.Context
	cancel context.CancelFunc
	wg     sync.WaitGroup

	// –õ–æ–≥–≥–µ—Ä
	logger *logging.Logger
}

// ClientChannel —Ö—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º –∫–∞–Ω–∞–ª–µ
type ClientChannel struct {
	ID        string
	Channel   NetChannel
	Connected bool
	LastSeen  time.Time
}

// NewChannelServer —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
func NewChannelServer(addr string, config *ChannelConfig) *ChannelServer {
	logger := logging.GetNetworkLogger()

	converter, err := NewMessageConverter()
	if err != nil {
		logger.Error("Failed to create message converter: %v", err)
		return nil
	}

	return &ChannelServer{
		addr:      addr,
		config:    config,
		clients:   make(map[string]*ClientChannel),
		converter: converter,
		logger:    logger,
	}
}

// SetHandlers —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
func (cs *ChannelServer) SetHandlers(
	onConnect func(string, NetChannel),
	onDisconnect func(string),
	onMessage func(string, *protocol.GameMessage),
) {
	cs.onConnect = onConnect
	cs.onDisconnect = onDisconnect
	cs.onMessage = onMessage
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
func (cs *ChannelServer) Start() error {
	listener, err := kcp.ListenWithOptions(cs.addr, nil, 0, 0)
	if err != nil {
		return fmt.Errorf("failed to listen on %s: %w", cs.addr, err)
	}

	cs.listener = listener
	cs.ctx, cs.cancel = context.WithCancel(context.Background())

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—ã
	cs.wg.Add(2)
	go cs.acceptLoop()
	go cs.timeoutLoop()

	cs.logger.Info("üöÄ Channel server started on %s", cs.addr)
	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
func (cs *ChannelServer) Stop() error {
	if cs.cancel != nil {
		cs.cancel()
	}

	if cs.listener != nil {
		cs.listener.Close()
	}

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ—Ä—É—Ç–∏–Ω
	cs.wg.Wait()

	// –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
	cs.clientsMu.Lock()
	for id, client := range cs.clients {
		client.Channel.Close()
		delete(cs.clients, id)
	}
	cs.clientsMu.Unlock()

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
	if err := cs.converter.Close(); err != nil {
		cs.logger.Error("Failed to close converter: %v", err)
	}

	cs.logger.Info("üõë Channel server stopped")
	return nil
}

// acceptLoop –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
func (cs *ChannelServer) acceptLoop() {
	defer cs.wg.Done()

	for {
		select {
		case <-cs.ctx.Done():
			return
		default:
		}

		conn, err := cs.listener.Accept()
		if err != nil {
			select {
			case <-cs.ctx.Done():
				return // –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
			default:
				cs.logger.Error("Failed to accept connection: %v", err)
				continue
			}
		}

		cs.wg.Add(1)
		go cs.handleConnection(conn)
	}
}

// handleConnection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
func (cs *ChannelServer) handleConnection(conn net.Conn) {
	defer cs.wg.Done()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (KCP)
	kcpConn, ok := conn.(*kcp.UDPSession)
	if !ok {
		cs.logger.Error("Invalid connection type")
		conn.Close()
		return
	}

	// –°–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º KCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	logger := logging.GetNetworkLogger()
	channel := NewKCPChannelFromConn(kcpConn, cs.config, logger)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞
	clientID := fmt.Sprintf("client-%s-%d", conn.RemoteAddr(), time.Now().UnixNano())

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
	client := &ClientChannel{
		ID:        clientID,
		Channel:   channel,
		Connected: true,
		LastSeen:  time.Now(),
	}

	cs.clientsMu.Lock()
	cs.clients[clientID] = client
	cs.clientsMu.Unlock()

	// –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	if cs.onConnect != nil {
		cs.onConnect(clientID, channel)
	}

	// –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
	cs.readLoop(client)

	// –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
	cs.disconnectClient(clientID)
}

// readLoop —á–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
func (cs *ChannelServer) readLoop(client *ClientChannel) {
	for {
		select {
		case <-cs.ctx.Done():
			return
		default:
		}

		// –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞)
		ctx, cancel := context.WithTimeout(context.Background(), time.Second)
		netMsg, err := client.Channel.Receive(ctx)
		cancel()

		if err != nil {
			if ne, ok := err.(net.Error); ok && ne.Timeout() {
				continue // –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
			}
			// –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è, –æ—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
			return
		}

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º NetGameMessage –≤ GameMessage
		msg, convertErr := cs.converter.NetToGame(netMsg)
		if convertErr != nil {
			cs.logger.Error("Failed to convert message: %v", convertErr)
			continue
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
		cs.clientsMu.Lock()
		client.LastSeen = time.Now()
		cs.clientsMu.Unlock()

		// –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
		if cs.onMessage != nil {
			cs.onMessage(client.ID, msg)
		}
	}
}

// timeoutLoop –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∞–π–º–∞—É—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
func (cs *ChannelServer) timeoutLoop() {
	defer cs.wg.Done()

	ticker := time.NewTicker(5 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-cs.ctx.Done():
			return
		case <-ticker.C:
			cs.checkTimeouts()
		}
	}
}

// checkTimeouts –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
func (cs *ChannelServer) checkTimeouts() {
	timeout := 30 * time.Second
	now := time.Now()

	cs.clientsMu.Lock()
	defer cs.clientsMu.Unlock()

	for id, client := range cs.clients {
		if now.Sub(client.LastSeen) > timeout {
			cs.logger.Warn("‚è±Ô∏è Client %s timed out", id)
			cs.wg.Add(1)
			go cs.disconnectClient(id)
		}
	}
}

// disconnectClient –æ—Ç–∫–ª—é—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞
func (cs *ChannelServer) disconnectClient(clientID string) {
	defer cs.wg.Done()

	cs.clientsMu.Lock()
	client, exists := cs.clients[clientID]
	if !exists {
		cs.clientsMu.Unlock()
		return
	}
	delete(cs.clients, clientID)
	cs.clientsMu.Unlock()

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª
	client.Channel.Close()

	// –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
	if cs.onDisconnect != nil {
		cs.onDisconnect(clientID)
	}

	cs.logger.Info("üëã Client %s disconnected", clientID)
}

// SendToClient –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
func (cs *ChannelServer) SendToClient(clientID string, msg *protocol.GameMessage, flags ChannelFlags) error {
	cs.clientsMu.RLock()
	client, exists := cs.clients[clientID]
	cs.clientsMu.RUnlock()

	if !exists {
		return errors.New("client not found")
	}

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º GameMessage –≤ NetGameMessage
	netMsg, err := cs.converter.GameToNet(msg)
	if err != nil {
		return fmt.Errorf("failed to convert message: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
	opts := cs.converter.GetSendOptions(msg)
	_ = flags // TODO: –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å flags —Å SendOptions

	return client.Channel.Send(context.Background(), netMsg, opts)
}

// Broadcast –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
func (cs *ChannelServer) Broadcast(msg *protocol.GameMessage, flags ChannelFlags) {
	cs.clientsMu.RLock()
	clients := make([]*ClientChannel, 0, len(cs.clients))
	for _, client := range cs.clients {
		clients = append(clients, client)
	}
	cs.clientsMu.RUnlock()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
	var wg sync.WaitGroup
	for _, client := range clients {
		wg.Add(1)
		go func(c *ClientChannel) {
			defer wg.Done()
			// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º GameMessage –≤ NetGameMessage
			netMsg, err := cs.converter.GameToNet(msg)
			if err != nil {
				cs.logger.Error("Failed to convert message for %s: %v", c.ID, err)
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
			opts := cs.converter.GetSendOptions(msg)
			_ = flags // TODO: –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å flags —Å SendOptions

			if err := c.Channel.Send(context.Background(), netMsg, opts); err != nil {
				cs.logger.Error("Failed to send to %s: %v", c.ID, err)
			}
		}(client)
	}
	wg.Wait()
}

// GetClientCount –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
func (cs *ChannelServer) GetClientCount() int {
	cs.clientsMu.RLock()
	defer cs.clientsMu.RUnlock()
	return len(cs.clients)
}
