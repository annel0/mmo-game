package api

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/annel0/mmo-game/internal/auth"
	"github.com/annel0/mmo-game/internal/world/entity"
)

// ServerIntegration —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π REST API —Å –∏–≥—Ä–æ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
type ServerIntegration struct {
	restServer    *RestServer
	userRepo      auth.UserRepository
	entityManager *entity.EntityManager
	httpServer    *http.Server
	ctx           context.Context
	cancel        context.CancelFunc
}

// IntegrationConfig —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
type IntegrationConfig struct {
	// REST API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	RestPort string

	// MariaDB –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	MariaConfig auth.MariaConfig

	// –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—É—â–Ω–æ—Å—Ç–µ–π
	EntityManager *entity.EntityManager

	// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ MariaDB –≤–º–µ—Å—Ç–æ in-memory —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
	UseMariaDB bool
}

// NewServerIntegration —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é REST API —Å –∏–≥—Ä–æ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
func NewServerIntegration(config IntegrationConfig) (*ServerIntegration, error) {
	ctx, cancel := context.WithCancel(context.Background())

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	var userRepo auth.UserRepository
	var err error

	if config.UseMariaDB {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º MariaDB
		userRepo, err = auth.NewMariaUserRepo(config.MariaConfig)
		if err != nil {
			cancel()
			return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MariaDB: %w", err)
		}
		log.Println("‚úÖ MariaDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
	} else {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º in-memory —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏/—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		userRepo, err = auth.NewMemoryUserRepo()
		if err != nil {
			cancel()
			return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å in-memory —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: %w", err)
		}
		log.Println("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è in-memory —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
	}

	// –°–æ–∑–¥–∞–µ–º REST —Å–µ—Ä–≤–µ—Ä
	restServer := NewRestServer(Config{
		Port:          config.RestPort,
		UserRepo:      userRepo,
		EntityManager: config.EntityManager,
	})

	integration := &ServerIntegration{
		restServer:    restServer,
		userRepo:      userRepo,
		entityManager: config.EntityManager,
		ctx:           ctx,
		cancel:        cancel,
	}

	return integration, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç REST API —Å–µ—Ä–≤–µ—Ä
func (si *ServerIntegration) Start() error {
	log.Printf("–ó–∞–ø—É—Å–∫ REST API —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É %s", si.restServer.port)

	// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è graceful shutdown
	si.httpServer = &http.Server{
		Addr:    si.restServer.port,
		Handler: si.restServer.router,
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		if err := si.httpServer.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ REST API —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
	}()

	log.Printf("‚úÖ REST API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost%s", si.restServer.port)
	log.Printf("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
	log.Printf("   GET  /health           - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
	log.Printf("   POST /api/auth/login   - –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
	log.Printf("   GET  /api/stats        - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (—Ç—Ä–µ–±—É–µ—Ç JWT)")
	log.Printf("   GET  /api/server       - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ (—Ç—Ä–µ–±—É–µ—Ç JWT)")
	log.Printf("   POST /api/admin/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)")
	log.Printf("   GET  /api/admin/users  - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)")
	log.Printf("   POST /api/webhook      - Webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç")

	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç REST API —Å–µ—Ä–≤–µ—Ä
func (si *ServerIntegration) Stop() error {
	log.Println("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ REST API —Å–µ—Ä–≤–µ—Ä–∞...")

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è graceful shutdown
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
	if si.httpServer != nil {
		if err := si.httpServer.Shutdown(ctx); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
			return err
		}
	}

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	if si.userRepo != nil {
		if closer, ok := si.userRepo.(interface{ Close() error }); ok {
			if err := closer.Close(); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: %v", err)
			}
		}
	}

	// –û—Ç–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
	si.cancel()

	log.Println("‚úÖ REST API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	return nil
}

// GetUserRepository –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–≥—Ä–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ)
func (si *ServerIntegration) GetUserRepository() auth.UserRepository {
	return si.userRepo
}

// GetRestServer –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç REST —Å–µ—Ä–≤–µ—Ä (–¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
func (si *ServerIntegration) GetRestServer() *RestServer {
	return si.restServer
}

// GetOutboundWebhooks –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ö–æ–¥—è—â–∏—Ö webhook'–æ–≤
func (si *ServerIntegration) GetOutboundWebhooks() *OutboundWebhookManager {
	return si.restServer.outboundWebhooks
}

// IsHealthy –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
func (si *ServerIntegration) IsHealthy() bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω
	select {
	case <-si.ctx.Done():
		return false
	default:
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (–µ—Å–ª–∏ MariaDB)
	if mariaRepo, ok := si.userRepo.(*auth.MariaUserRepo); ok {
		// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		_, err := mariaRepo.GetUserStats()
		return err == nil
	}

	return true
}
