package api

import (
	"bytes"
	"context"
	"crypto/hmac"
	"crypto/sha256"
	"encoding/hex"
	"encoding/json"
	"log"
	"net/http"
	"sync"
	"time"
)

// OutboundWebhook –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Å—Ö–æ–¥—è—â–∏–π webhook
type OutboundWebhook struct {
	ID           uint64     `json:"id"`
	Name         string     `json:"name" binding:"required"`
	URL          string     `json:"url" binding:"required"`
	Secret       string     `json:"secret,omitempty"`
	Events       []string   `json:"events" binding:"required"` // –°–æ–±—ã—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω
	Active       bool       `json:"active"`
	Timeout      int        `json:"timeout"` // –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
	RetryCount   int        `json:"retry_count"`
	CreatedAt    time.Time  `json:"created_at"`
	LastUsed     *time.Time `json:"last_used,omitempty"`
	FailureCount int        `json:"failure_count"`
}

// OutboundWebhookEvent –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
type OutboundWebhookEvent struct {
	EventType   string                 `json:"event_type"`
	Timestamp   int64                  `json:"timestamp"`
	ServerID    string                 `json:"server_id"`
	Data        map[string]interface{} `json:"data"`
	Source      string                 `json:"source"`
	Environment string                 `json:"environment"`
}

// OutboundWebhookManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ö–æ–¥—è—â–∏–º–∏ webhook'–∞–º–∏
type OutboundWebhookManager struct {
	webhooks    map[uint64]*OutboundWebhook
	eventQueue  chan OutboundWebhookEvent
	mu          sync.RWMutex
	nextID      uint64
	httpClient  *http.Client
	serverID    string
	environment string
}

// NewOutboundWebhookManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ö–æ–¥—è—â–∏—Ö webhook'–æ–≤
func NewOutboundWebhookManager(serverID, environment string) *OutboundWebhookManager {
	manager := &OutboundWebhookManager{
		webhooks:    make(map[uint64]*OutboundWebhook),
		eventQueue:  make(chan OutboundWebhookEvent, 1000), // –ë—É—Ñ–µ—Ä –¥–ª—è —Å–æ–±—ã—Ç–∏–π
		nextID:      1,
		serverID:    serverID,
		environment: environment,
		httpClient: &http.Client{
			Timeout: 30 * time.Second,
		},
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
	go manager.eventWorker()

	return manager
}

// AddWebhook –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π webhook
func (owm *OutboundWebhookManager) AddWebhook(webhook OutboundWebhook) *OutboundWebhook {
	owm.mu.Lock()
	defer owm.mu.Unlock()

	webhook.ID = owm.nextID
	owm.nextID++
	webhook.CreatedAt = time.Now()
	webhook.Active = true

	if webhook.Timeout == 0 {
		webhook.Timeout = 30
	}
	if webhook.RetryCount == 0 {
		webhook.RetryCount = 3
	}

	owm.webhooks[webhook.ID] = &webhook
	return &webhook
}

// GetWebhooks –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö webhook'–æ–≤
func (owm *OutboundWebhookManager) GetWebhooks() []*OutboundWebhook {
	owm.mu.RLock()
	defer owm.mu.RUnlock()

	webhooks := make([]*OutboundWebhook, 0, len(owm.webhooks))
	for _, webhook := range owm.webhooks {
		webhooks = append(webhooks, webhook)
	}
	return webhooks
}

// GetWebhook –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç webhook –ø–æ ID
func (owm *OutboundWebhookManager) GetWebhook(id uint64) *OutboundWebhook {
	owm.mu.RLock()
	defer owm.mu.RUnlock()

	webhook, exists := owm.webhooks[id]
	if !exists {
		return nil
	}
	return webhook
}

// UpdateWebhook –æ–±–Ω–æ–≤–ª—è–µ—Ç webhook
func (owm *OutboundWebhookManager) UpdateWebhook(id uint64, updates OutboundWebhook) *OutboundWebhook {
	owm.mu.Lock()
	defer owm.mu.Unlock()

	webhook, exists := owm.webhooks[id]
	if !exists {
		return nil
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
	if updates.Name != "" {
		webhook.Name = updates.Name
	}
	if updates.URL != "" {
		webhook.URL = updates.URL
	}
	if updates.Secret != "" {
		webhook.Secret = updates.Secret
	}
	if len(updates.Events) > 0 {
		webhook.Events = updates.Events
	}
	if updates.Timeout > 0 {
		webhook.Timeout = updates.Timeout
	}
	if updates.RetryCount >= 0 {
		webhook.RetryCount = updates.RetryCount
	}
	webhook.Active = updates.Active

	return webhook
}

// DeleteWebhook —É–¥–∞–ª—è–µ—Ç webhook
func (owm *OutboundWebhookManager) DeleteWebhook(id uint64) bool {
	owm.mu.Lock()
	defer owm.mu.Unlock()

	_, exists := owm.webhooks[id]
	if !exists {
		return false
	}

	delete(owm.webhooks, id)
	return true
}

// SendEvent –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º webhook'–∞–º
func (owm *OutboundWebhookManager) SendEvent(eventType string, data map[string]interface{}) {
	event := OutboundWebhookEvent{
		EventType:   eventType,
		Timestamp:   time.Now().Unix(),
		ServerID:    owm.serverID,
		Data:        data,
		Source:      "game_server",
		Environment: owm.environment,
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
	select {
	case owm.eventQueue <- event:
		log.Printf("üì§ –°–æ–±—ã—Ç–∏–µ %s –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å webhook'–æ–≤", eventType)
	default:
		log.Printf("‚ö†Ô∏è  –û—á–µ—Ä–µ–¥—å webhook'–æ–≤ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, —Å–æ–±—ã—Ç–∏–µ %s –ø—Ä–æ–ø—É—â–µ–Ω–æ", eventType)
	}
}

// eventWorker –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
func (owm *OutboundWebhookManager) eventWorker() {
	for event := range owm.eventQueue {
		owm.processEvent(event)
	}
}

// processEvent –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ
func (owm *OutboundWebhookManager) processEvent(event OutboundWebhookEvent) {
	owm.mu.RLock()
	webhooks := make([]*OutboundWebhook, 0)

	// –ù–∞—Ö–æ–¥–∏–º webhook'–∏, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
	for _, webhook := range owm.webhooks {
		if webhook.Active && owm.isSubscribedToEvent(webhook, event.EventType) {
			webhooks = append(webhooks, webhook)
		}
	}
	owm.mu.RUnlock()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–º—É webhook'—É
	for _, webhook := range webhooks {
		go owm.sendToWebhook(webhook, event)
	}
}

// isSubscribedToEvent –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ webhook –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
func (owm *OutboundWebhookManager) isSubscribedToEvent(webhook *OutboundWebhook, eventType string) bool {
	for _, subscribedEvent := range webhook.Events {
		if subscribedEvent == eventType || subscribedEvent == "*" {
			return true
		}
	}
	return false
}

// sendToWebhook –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É webhook'—É
func (owm *OutboundWebhookManager) sendToWebhook(webhook *OutboundWebhook, event OutboundWebhookEvent) {
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
	jsonData, err := json.Marshal(event)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è webhook %s: %v", webhook.Name, err)
		return
	}

	// –°–æ–∑–¥–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å
	ctx, cancel := context.WithTimeout(context.Background(), time.Duration(webhook.Timeout)*time.Second)
	defer cancel()

	req, err := http.NewRequestWithContext(ctx, "POST", webhook.URL, bytes.NewBuffer(jsonData))
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è webhook %s: %v", webhook.Name, err)
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("User-Agent", "MMO-Game-Server/1.0")
	req.Header.Set("X-Event-Type", event.EventType)
	req.Header.Set("X-Server-ID", event.ServerID)

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ–∫—Ä–µ—Ç
	if webhook.Secret != "" {
		signature := owm.generateSignature(jsonData, webhook.Secret)
		req.Header.Set("X-Webhook-Signature", signature)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å retry –ª–æ–≥–∏–∫–æ–π
	success := false
	for attempt := 0; attempt <= webhook.RetryCount; attempt++ {
		resp, err := owm.httpClient.Do(req)
		if err != nil {
			log.Printf("‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ %d/%d –¥–ª—è webhook %s: %v", attempt+1, webhook.RetryCount+1, webhook.Name, err)
			time.Sleep(time.Duration(attempt+1) * time.Second) // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
			continue
		}

		if resp.StatusCode >= 200 && resp.StatusCode < 300 {
			success = true
			log.Printf("‚úÖ –°–æ–±—ã—Ç–∏–µ %s —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ webhook %s", event.EventType, webhook.Name)
			resp.Body.Close()
			break
		} else {
			log.Printf("‚ö†Ô∏è  Webhook %s –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å %d –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ %d", webhook.Name, resp.StatusCode, attempt+1)
			resp.Body.Close()
			if attempt < webhook.RetryCount {
				time.Sleep(time.Duration(attempt+1) * time.Second)
			}
		}
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	owm.mu.Lock()
	now := time.Now()
	webhook.LastUsed = &now
	if !success {
		webhook.FailureCount++
	}
	owm.mu.Unlock()
}

// generateSignature –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HMAC –ø–æ–¥–ø–∏—Å—å
func (owm *OutboundWebhookManager) generateSignature(data []byte, secret string) string {
	mac := hmac.New(sha256.New, []byte(secret))
	mac.Write(data)
	return "sha256=" + hex.EncodeToString(mac.Sum(nil))
}

// GetEventTypes –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
func (owm *OutboundWebhookManager) GetEventTypes() []string {
	return []string{
		"server.started",
		"server.stopped",
		"server.error",
		"server.high_cpu",
		"server.high_memory",
		"server.low_tps",
		"player.joined",
		"player.left",
		"player.banned",
		"player.kicked",
		"anticheat.violation",
		"anticheat.ban",
		"world.saved",
		"world.load_error",
		"chat.message",
		"admin.command",
		"security.alert",
		"backup.completed",
		"backup.failed",
	}
}
