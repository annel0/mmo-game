package api

import (
	"crypto/hmac"
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
)

// WebhookEvent –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç webhook —Å–æ–±—ã—Ç–∏–µ
type WebhookEvent struct {
	EventType string                 `json:"event_type" binding:"required"`
	Timestamp int64                  `json:"timestamp"`
	Data      map[string]interface{} `json:"data"`
	Source    string                 `json:"source,omitempty"`
}

// WebhookConfig –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è webhook
type WebhookConfig struct {
	SecretKey        string
	RequireSignature bool
	EnableLogging    bool
}

// WebhookHandler –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook —Å–æ–±—ã—Ç–∏–π
type WebhookHandler struct {
	config   WebhookConfig
	handlers map[string]func(WebhookEvent) error
}

// NewWebhookHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook
func NewWebhookHandler(config WebhookConfig) *WebhookHandler {
	return &WebhookHandler{
		config:   config,
		handlers: make(map[string]func(WebhookEvent) error),
	}
}

// RegisterEventHandler —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
func (wh *WebhookHandler) RegisterEventHandler(eventType string, handler func(WebhookEvent) error) {
	wh.handlers[eventType] = handler
}

// HandleWebhook —É–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook
func (rs *RestServer) HandleWebhook(c *gin.Context) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
	if !strings.Contains(c.GetHeader("Content-Type"), "application/json") {
		c.JSON(http.StatusBadRequest, GenericResponse{
			Success: false,
			Message: "–¢—Ä–µ–±—É–µ—Ç—Å—è Content-Type: application/json",
		})
		return
	}

	// –ü–∞—Ä—Å–∏–º JSON
	var event WebhookEvent
	if err := c.ShouldBindJSON(&event); err != nil {
		c.JSON(http.StatusBadRequest, GenericResponse{
			Success: false,
			Message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏—è: " + err.Error(),
		})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
	if rs.webhookConfig.RequireSignature {
		signature := c.GetHeader("X-Webhook-Signature")
		// –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–≥–∏–∫—É —á—Ç–µ–Ω–∏—è —Ç–µ–ª–∞
		// –ü–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É
		_ = signature
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timestamp –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
	if event.Timestamp == 0 {
		event.Timestamp = time.Now().Unix()
	}

	// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
	if rs.webhookConfig.EnableLogging {
		log.Printf("üìß Webhook —Å–æ–±—ã—Ç–∏–µ: %s –æ—Ç %s", event.EventType, c.ClientIP())
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
	result := rs.processWebhookEvent(event)

	c.JSON(http.StatusOK, GenericResponse{
		Success: true,
		Message: "Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
		Data: map[string]interface{}{
			"event_id":     fmt.Sprintf("%d_%s", event.Timestamp, event.EventType),
			"processed_at": time.Now().Unix(),
			"result":       result,
		},
	})
}

// processWebhookEvent –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
func (rs *RestServer) processWebhookEvent(event WebhookEvent) map[string]interface{} {
	result := map[string]interface{}{
		"event_type": event.EventType,
		"status":     "processed",
	}

	switch event.EventType {
	case "user.created":
		result["details"] = rs.handleUserCreated(event)
	case "user.login":
		result["details"] = rs.handleUserLogin(event)
	case "server.status":
		result["details"] = rs.handleServerStatus(event)
	case "game.event":
		result["details"] = rs.handleGameEvent(event)
	case "system.alert":
		result["details"] = rs.handleSystemAlert(event)
	default:
		result["status"] = "unknown_event"
		result["details"] = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è"
	}

	return result
}

// handleUserCreated –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (rs *RestServer) handleUserCreated(event WebhookEvent) string {
	username, _ := event.Data["username"].(string)
	isAdmin, _ := event.Data["is_admin"].(bool)

	log.Printf("üîî –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s (admin: %v)", username, isAdmin)
	return fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", username)
}

// handleUserLogin –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (rs *RestServer) handleUserLogin(event WebhookEvent) string {
	username, _ := event.Data["username"].(string)
	ip, _ := event.Data["ip"].(string)

	log.Printf("üë§ –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s —Å IP %s", username, ip)
	return fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É", username)
}

// handleServerStatus –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
func (rs *RestServer) handleServerStatus(event WebhookEvent) string {
	status, _ := event.Data["status"].(string)

	log.Printf("üñ•Ô∏è  –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: %s", status)
	return fmt.Sprintf("–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: %s", status)
}

// handleGameEvent –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
func (rs *RestServer) handleGameEvent(event WebhookEvent) string {
	action, _ := event.Data["action"].(string)
	playerID, _ := event.Data["player_id"].(float64)

	log.Printf("üéÆ –ò–≥—Ä–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: %s (–∏–≥—Ä–æ–∫: %.0f)", action, playerID)
	return fmt.Sprintf("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–≥—Ä–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: %s", action)
}

// handleSystemAlert –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
func (rs *RestServer) handleSystemAlert(event WebhookEvent) string {
	level, _ := event.Data["level"].(string)
	message, _ := event.Data["message"].(string)

	log.Printf("‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ [%s]: %s", level, message)
	return fmt.Sprintf("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è %s", level)
}

// verifyWebhookSignature –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å webhook
func (rs *RestServer) verifyWebhookSignature(body []byte, signature string) bool {
	if rs.webhookConfig.SecretKey == "" {
		return true // –ï—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
	}

	// –°–æ–∑–¥–∞–µ–º HMAC –ø–æ–¥–ø–∏—Å—å
	mac := hmac.New(sha256.New, []byte(rs.webhookConfig.SecretKey))
	mac.Write(body)
	expectedSignature := "sha256=" + hex.EncodeToString(mac.Sum(nil))

	// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏
	return hmac.Equal([]byte(signature), []byte(expectedSignature))
}
