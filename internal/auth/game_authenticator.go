package auth

import (
	"crypto/rand"
	"encoding/base64"
	"fmt"
	"log"
	"time"

	"github.com/annel0/mmo-game/internal/protocol"
	"github.com/golang-jwt/jwt/v5"
)

// GameAuthenticator —É–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏–≥—Ä–æ–∫–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JWT
type GameAuthenticator struct {
	userRepo     UserRepository
	jwtSecret    []byte
	tokenExpiry  time.Duration
	serverInfo   *protocol.ServerInfo
	capabilities []string
}

// JWTClaims —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ JWT —Ç–æ–∫–µ–Ω–∞
type JWTClaims struct {
	UserID   uint64 `json:"user_id"`
	Username string `json:"username"`
	Role     string `json:"role"`
	jwt.RegisteredClaims
}

// NewGameAuthenticator —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
func NewGameAuthenticator(repo UserRepository, jwtSecret []byte) *GameAuthenticator {
	if len(jwtSecret) == 0 {
		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–µ–∫—Ä–µ—Ç, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
		jwtSecret = make([]byte, 32)
		if _, err := rand.Read(jwtSecret); err != nil {
			log.Printf("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å JWT —Å–µ–∫—Ä–µ—Ç: %v", err)
		}
	}

	return &GameAuthenticator{
		userRepo:     repo,
		jwtSecret:    jwtSecret,
		tokenExpiry:  24 * time.Hour, // 24 —á–∞—Å–∞
		capabilities: []string{"jwt", "rest_api", "webhooks"},
		serverInfo: &protocol.ServerInfo{
			Version:          "v0.0.3a",
			Environment:      "development",
			RestApiAvailable: true,
			RestApiEndpoint:  "http://localhost:8088",
			Features:         []string{"webhooks", "analytics", "outbound_webhooks"},
		},
	}
}

// Authenticate –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞
func (ga *GameAuthenticator) Authenticate(req *protocol.AuthRequest) (*protocol.AuthResponse, error) {
	// –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	log.Printf("üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: user=%s, has_password=%v, has_jwt=%v, capabilities=%v",
		req.Username, req.Password != nil, req.JwtToken != nil, req.Capabilities)

	// 1. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ JWT —Ç–æ–∫–µ–Ω—É
	if req.JwtToken != nil && *req.JwtToken != "" {
		return ga.authenticateByJWT(*req.JwtToken, req)
	}

	// 2. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ username/password
	if req.Password != nil && *req.Password != "" {
		return ga.authenticateByCredentials(req.Username, *req.Password, req)
	}

	// 3. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ä–æ–º—É —Ç–æ–∫–µ–Ω—É (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
	if req.Token != nil && *req.Token != "" {
		return ga.authenticateByLegacyToken(*req.Token, req)
	}

	return &protocol.AuthResponse{
		Success: false,
		Message: "–¢—Ä–µ–±—É–µ—Ç—Å—è username/password –∏–ª–∏ JWT —Ç–æ–∫–µ–Ω",
	}, nil
}

// authenticateByCredentials –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ª–æ–≥–∏–Ω—É/–ø–∞—Ä–æ–ª—é
func (ga *GameAuthenticator) authenticateByCredentials(username, password string, req *protocol.AuthRequest) (*protocol.AuthResponse, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	user, err := ga.userRepo.ValidateCredentials(username, password)
	if err != nil {
		log.Printf("‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", username, err)
		return &protocol.AuthResponse{
			Success: false,
			Message: "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
		}, nil
	}

	log.Printf("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (ID: %d)", user.Username, user.ID)

	// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
	response := &protocol.AuthResponse{
		Success:            true,
		Message:            "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
		PlayerId:           user.ID,
		WorldName:          "main_world",
		ServerCapabilities: ga.capabilities,
		ServerInfo:         ga.serverInfo,
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω
	if req.RequestJwt || ga.contains(req.Capabilities, "jwt") {
		jwtToken, expiresAt, err := ga.generateJWT(user)
		if err != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JWT –¥–ª—è %s: %v", username, err)
		} else {
			response.JwtToken = &jwtToken
			response.JwtExpiresAt = expiresAt
			log.Printf("üé´ JWT —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è %s, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ %s",
				username, time.Unix(expiresAt, 0).Format("2006-01-02 15:04:05"))
		}
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º legacy —Ç–æ–∫–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
	legacyToken, err := ga.generateLegacyToken(user)
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ legacy —Ç–æ–∫–µ–Ω–∞ –¥–ª—è %s: %v", username, err)
	} else {
		response.Token = legacyToken
	}

	return response, nil
}

// authenticateByJWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ JWT —Ç–æ–∫–µ–Ω—É
func (ga *GameAuthenticator) authenticateByJWT(jwtToken string, req *protocol.AuthRequest) (*protocol.AuthResponse, error) {
	// –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º JWT
	token, err := jwt.ParseWithClaims(jwtToken, &JWTClaims{}, func(token *jwt.Token) (interface{}, error) {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–ø–∏—Å–∏
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			return nil, fmt.Errorf("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–ø–∏—Å–∏: %v", token.Header["alg"])
		}
		return ga.jwtSecret, nil
	})

	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JWT: %v", err)
		return &protocol.AuthResponse{
			Success: false,
			Message: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω",
		}, nil
	}

	if !token.Valid {
		log.Printf("‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
		return &protocol.AuthResponse{
			Success: false,
			Message: "JWT —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
		}, nil
	}

	claims, ok := token.Claims.(*JWTClaims)
	if !ok {
		log.Printf("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ claims –≤ JWT —Ç–æ–∫–µ–Ω–µ")
		return &protocol.AuthResponse{
			Success: false,
			Message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JWT —Ç–æ–∫–µ–Ω–∞",
		}, nil
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := ga.userRepo.GetUserByID(claims.UserID)
	if err != nil {
		log.Printf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω: %v", claims.UserID, err)
		return &protocol.AuthResponse{
			Success: false,
			Message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
		}, nil
	}

	log.Printf("‚úÖ JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è %s (ID: %d)", user.Username, user.ID)

	return &protocol.AuthResponse{
		Success:            true,
		Message:            "JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
		PlayerId:           user.ID,
		WorldName:          "main_world",
		ServerCapabilities: ga.capabilities,
		ServerInfo:         ga.serverInfo,
		JwtToken:           &jwtToken, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω
		JwtExpiresAt:       claims.ExpiresAt.Unix(),
	}, nil
}

// authenticateByLegacyToken –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ä–æ–º—É —Ç–æ–∫–µ–Ω—É (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
func (ga *GameAuthenticator) authenticateByLegacyToken(token string, req *protocol.AuthRequest) (*protocol.AuthResponse, error) {
	// –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
	// –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
	log.Printf("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å legacy —Ç–æ–∫–µ–Ω–æ–º: %s", token[:min(len(token), 10)]+"...")
	return &protocol.AuthResponse{
		Success: false,
		Message: "Legacy —Ç–æ–∫–µ–Ω—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ username/password",
	}, nil
}

// generateJWT —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω
func (ga *GameAuthenticator) generateJWT(user *User) (string, int64, error) {
	expiresAt := time.Now().Add(ga.tokenExpiry)

	claims := &JWTClaims{
		UserID:   user.ID,
		Username: user.Username,
		Role:     user.GetRole(),
		RegisteredClaims: jwt.RegisteredClaims{
			ExpiresAt: jwt.NewNumericDate(expiresAt),
			IssuedAt:  jwt.NewNumericDate(time.Now()),
			Subject:   user.Username,
			Issuer:    "mmo-game-server",
			ID:        fmt.Sprintf("user_%d_%d", user.ID, time.Now().Unix()),
		},
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	tokenString, err := token.SignedString(ga.jwtSecret)
	if err != nil {
		return "", 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏ JWT —Ç–æ–∫–µ–Ω–∞: %w", err)
	}

	return tokenString, expiresAt.Unix(), nil
}

// generateLegacyToken —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
func (ga *GameAuthenticator) generateLegacyToken(user *User) (string, error) {
	// –ü—Ä–æ—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ base64
	tokenData := fmt.Sprintf("%d:%s:%d", user.ID, user.Username, time.Now().Unix())
	return base64.StdEncoding.EncodeToString([]byte(tokenData)), nil
}

// contains –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ª–∞–π—Å–µ
func (ga *GameAuthenticator) contains(slice []string, item string) bool {
	for _, s := range slice {
		if s == item {
			return true
		}
	}
	return false
}

// SetJWTSecret —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π JWT —Å–µ–∫—Ä–µ—Ç
func (ga *GameAuthenticator) SetJWTSecret(secret []byte) {
	ga.jwtSecret = secret
}

// GetServerInfo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
func (ga *GameAuthenticator) GetServerInfo() *protocol.ServerInfo {
	return ga.serverInfo
}

// min –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –¥–≤—É—Ö —á–∏—Å–µ–ª
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
