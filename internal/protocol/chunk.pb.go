// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: chunk.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Запрос на получение чанка
type ChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkX        int32                  `protobuf:"varint,1,opt,name=chunk_x,json=chunkX,proto3" json:"chunk_x,omitempty"`
	ChunkY        int32                  `protobuf:"varint,2,opt,name=chunk_y,json=chunkY,proto3" json:"chunk_y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkRequest) Reset() {
	*x = ChunkRequest{}
	mi := &file_chunk_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkRequest) ProtoMessage() {}

func (x *ChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chunk_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkRequest.ProtoReflect.Descriptor instead.
func (*ChunkRequest) Descriptor() ([]byte, []int) {
	return file_chunk_proto_rawDescGZIP(), []int{0}
}

func (x *ChunkRequest) GetChunkX() int32 {
	if x != nil {
		return x.ChunkX
	}
	return 0
}

func (x *ChunkRequest) GetChunkY() int32 {
	if x != nil {
		return x.ChunkY
	}
	return 0
}

// Данные чанка
type ChunkData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkX        int32                  `protobuf:"varint,1,opt,name=chunk_x,json=chunkX,proto3" json:"chunk_x,omitempty"`
	ChunkY        int32                  `protobuf:"varint,2,opt,name=chunk_y,json=chunkY,proto3" json:"chunk_y,omitempty"`
	Blocks        []*BlockRow            `protobuf:"bytes,3,rep,name=blocks,proto3" json:"blocks,omitempty"`     // Матрица блоков в чанке
	Entities      []*EntityData          `protobuf:"bytes,4,rep,name=entities,proto3" json:"entities,omitempty"` // Сущности в чанке
	Metadata      *JsonMetadata          `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"` // JSON-метаданные чанка
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkData) Reset() {
	*x = ChunkData{}
	mi := &file_chunk_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkData) ProtoMessage() {}

func (x *ChunkData) ProtoReflect() protoreflect.Message {
	mi := &file_chunk_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkData.ProtoReflect.Descriptor instead.
func (*ChunkData) Descriptor() ([]byte, []int) {
	return file_chunk_proto_rawDescGZIP(), []int{1}
}

func (x *ChunkData) GetChunkX() int32 {
	if x != nil {
		return x.ChunkX
	}
	return 0
}

func (x *ChunkData) GetChunkY() int32 {
	if x != nil {
		return x.ChunkY
	}
	return 0
}

func (x *ChunkData) GetBlocks() []*BlockRow {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *ChunkData) GetEntities() []*EntityData {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *ChunkData) GetMetadata() *JsonMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Строка блоков в чанке
type BlockRow struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockIds      []uint32               `protobuf:"varint,1,rep,packed,name=block_ids,json=blockIds,proto3" json:"block_ids,omitempty"` // ID блоков в строке
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockRow) Reset() {
	*x = BlockRow{}
	mi := &file_chunk_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRow) ProtoMessage() {}

func (x *BlockRow) ProtoReflect() protoreflect.Message {
	mi := &file_chunk_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRow.ProtoReflect.Descriptor instead.
func (*BlockRow) Descriptor() ([]byte, []int) {
	return file_chunk_proto_rawDescGZIP(), []int{2}
}

func (x *BlockRow) GetBlockIds() []uint32 {
	if x != nil {
		return x.BlockIds
	}
	return nil
}

// Данные метаданных блоков в чанке
type ChunkBlockMetadata struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	BlockMetadata map[string]*JsonMetadata `protobuf:"bytes,1,rep,name=block_metadata,json=blockMetadata,proto3" json:"block_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Ключ в формате "x:y", значение - метаданные блока
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkBlockMetadata) Reset() {
	*x = ChunkBlockMetadata{}
	mi := &file_chunk_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkBlockMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkBlockMetadata) ProtoMessage() {}

func (x *ChunkBlockMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chunk_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkBlockMetadata.ProtoReflect.Descriptor instead.
func (*ChunkBlockMetadata) Descriptor() ([]byte, []int) {
	return file_chunk_proto_rawDescGZIP(), []int{3}
}

func (x *ChunkBlockMetadata) GetBlockMetadata() map[string]*JsonMetadata {
	if x != nil {
		return x.BlockMetadata
	}
	return nil
}

var File_chunk_proto protoreflect.FileDescriptor

const file_chunk_proto_rawDesc = "" +
	"\n" +
	"\vchunk.proto\x12\bprotocol\x1a\fcommon.proto\x1a\fentity.proto\"@\n" +
	"\fChunkRequest\x12\x17\n" +
	"\achunk_x\x18\x01 \x01(\x05R\x06chunkX\x12\x17\n" +
	"\achunk_y\x18\x02 \x01(\x05R\x06chunkY\"\xcf\x01\n" +
	"\tChunkData\x12\x17\n" +
	"\achunk_x\x18\x01 \x01(\x05R\x06chunkX\x12\x17\n" +
	"\achunk_y\x18\x02 \x01(\x05R\x06chunkY\x12*\n" +
	"\x06blocks\x18\x03 \x03(\v2\x12.protocol.BlockRowR\x06blocks\x120\n" +
	"\bentities\x18\x04 \x03(\v2\x14.protocol.EntityDataR\bentities\x122\n" +
	"\bmetadata\x18\x05 \x01(\v2\x16.protocol.JsonMetadataR\bmetadata\"'\n" +
	"\bBlockRow\x12\x1b\n" +
	"\tblock_ids\x18\x01 \x03(\rR\bblockIds\"\xc6\x01\n" +
	"\x12ChunkBlockMetadata\x12V\n" +
	"\x0eblock_metadata\x18\x01 \x03(\v2/.protocol.ChunkBlockMetadata.BlockMetadataEntryR\rblockMetadata\x1aX\n" +
	"\x12BlockMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.protocol.JsonMetadataR\x05value:\x028\x01B.Z,github.com/annel0/mmo-game/internal/protocolb\x06proto3"

var (
	file_chunk_proto_rawDescOnce sync.Once
	file_chunk_proto_rawDescData []byte
)

func file_chunk_proto_rawDescGZIP() []byte {
	file_chunk_proto_rawDescOnce.Do(func() {
		file_chunk_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chunk_proto_rawDesc), len(file_chunk_proto_rawDesc)))
	})
	return file_chunk_proto_rawDescData
}

var file_chunk_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_chunk_proto_goTypes = []any{
	(*ChunkRequest)(nil),       // 0: protocol.ChunkRequest
	(*ChunkData)(nil),          // 1: protocol.ChunkData
	(*BlockRow)(nil),           // 2: protocol.BlockRow
	(*ChunkBlockMetadata)(nil), // 3: protocol.ChunkBlockMetadata
	nil,                        // 4: protocol.ChunkBlockMetadata.BlockMetadataEntry
	(*EntityData)(nil),         // 5: protocol.EntityData
	(*JsonMetadata)(nil),       // 6: protocol.JsonMetadata
}
var file_chunk_proto_depIdxs = []int32{
	2, // 0: protocol.ChunkData.blocks:type_name -> protocol.BlockRow
	5, // 1: protocol.ChunkData.entities:type_name -> protocol.EntityData
	6, // 2: protocol.ChunkData.metadata:type_name -> protocol.JsonMetadata
	4, // 3: protocol.ChunkBlockMetadata.block_metadata:type_name -> protocol.ChunkBlockMetadata.BlockMetadataEntry
	6, // 4: protocol.ChunkBlockMetadata.BlockMetadataEntry.value:type_name -> protocol.JsonMetadata
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_chunk_proto_init() }
func file_chunk_proto_init() {
	if File_chunk_proto != nil {
		return
	}
	file_common_proto_init()
	file_entity_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chunk_proto_rawDesc), len(file_chunk_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chunk_proto_goTypes,
		DependencyIndexes: file_chunk_proto_depIdxs,
		MessageInfos:      file_chunk_proto_msgTypes,
	}.Build()
	File_chunk_proto = out.File
	file_chunk_proto_goTypes = nil
	file_chunk_proto_depIdxs = nil
}
