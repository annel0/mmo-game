// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: network.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CompressionType определяет тип сжатия сообщения
type CompressionType int32

const (
	CompressionType_NONE CompressionType = 0
	CompressionType_ZSTD CompressionType = 1
)

// Enum value maps for CompressionType.
var (
	CompressionType_name = map[int32]string{
		0: "NONE",
		1: "ZSTD",
	}
	CompressionType_value = map[string]int32{
		"NONE": 0,
		"ZSTD": 1,
	}
)

func (x CompressionType) Enum() *CompressionType {
	p := new(CompressionType)
	*p = x
	return p
}

func (x CompressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_proto_enumTypes[0].Descriptor()
}

func (CompressionType) Type() protoreflect.EnumType {
	return &file_network_proto_enumTypes[0]
}

func (x CompressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompressionType.Descriptor instead.
func (CompressionType) EnumDescriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{0}
}

// NetFlags - флаги уровня надёжности
type NetFlags int32

const (
	NetFlags_UNRELIABLE_UNORDERED NetFlags = 0 // Быстрое сообщение, может теряться
	NetFlags_RELIABLE_ORDERED     NetFlags = 1 // Гарантированная доставка и порядок
	NetFlags_RELIABLE_UNORDERED   NetFlags = 2 // Гарантированная доставка, порядок не важен
)

// Enum value maps for NetFlags.
var (
	NetFlags_name = map[int32]string{
		0: "UNRELIABLE_UNORDERED",
		1: "RELIABLE_ORDERED",
		2: "RELIABLE_UNORDERED",
	}
	NetFlags_value = map[string]int32{
		"UNRELIABLE_UNORDERED": 0,
		"RELIABLE_ORDERED":     1,
		"RELIABLE_UNORDERED":   2,
	}
)

func (x NetFlags) Enum() *NetFlags {
	p := new(NetFlags)
	*p = x
	return p
}

func (x NetFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_network_proto_enumTypes[1].Descriptor()
}

func (NetFlags) Type() protoreflect.EnumType {
	return &file_network_proto_enumTypes[1]
}

func (x NetFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetFlags.Descriptor instead.
func (NetFlags) EnumDescriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{1}
}

type ConnectionMessage_ConnType int32

const (
	ConnectionMessage_CONNECT    ConnectionMessage_ConnType = 0
	ConnectionMessage_ACCEPT     ConnectionMessage_ConnType = 1
	ConnectionMessage_REJECT     ConnectionMessage_ConnType = 2
	ConnectionMessage_DISCONNECT ConnectionMessage_ConnType = 3
)

// Enum value maps for ConnectionMessage_ConnType.
var (
	ConnectionMessage_ConnType_name = map[int32]string{
		0: "CONNECT",
		1: "ACCEPT",
		2: "REJECT",
		3: "DISCONNECT",
	}
	ConnectionMessage_ConnType_value = map[string]int32{
		"CONNECT":    0,
		"ACCEPT":     1,
		"REJECT":     2,
		"DISCONNECT": 3,
	}
)

func (x ConnectionMessage_ConnType) Enum() *ConnectionMessage_ConnType {
	p := new(ConnectionMessage_ConnType)
	*p = x
	return p
}

func (x ConnectionMessage_ConnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionMessage_ConnType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_proto_enumTypes[2].Descriptor()
}

func (ConnectionMessage_ConnType) Type() protoreflect.EnumType {
	return &file_network_proto_enumTypes[2]
}

func (x ConnectionMessage_ConnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionMessage_ConnType.Descriptor instead.
func (ConnectionMessage_ConnType) EnumDescriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{3, 0}
}

// NetGameMessage - новая универсальная обёртка для всех сообщений
type NetGameMessage struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Sequence    uint32                 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`                                     // Номер пакета
	Ack         uint32                 `protobuf:"varint,2,opt,name=ack,proto3" json:"ack,omitempty"`                                               // Подтверждаем полученный пакет
	AckBits     uint32                 `protobuf:"varint,3,opt,name=ack_bits,json=ackBits,proto3" json:"ack_bits,omitempty"`                        // Маска подтверждений
	Flags       NetFlags               `protobuf:"varint,4,opt,name=flags,proto3,enum=protocol.NetFlags" json:"flags,omitempty"`                    // Флаги надёжности
	Compression CompressionType        `protobuf:"varint,5,opt,name=compression,proto3,enum=protocol.CompressionType" json:"compression,omitempty"` // Тип сжатия
	// Основное содержимое - используем правильные имена из существующих proto файлов
	//
	// Types that are valid to be assigned to Payload:
	//
	//	*NetGameMessage_AuthRequest
	//	*NetGameMessage_AuthResponse
	//	*NetGameMessage_ChunkRequest
	//	*NetGameMessage_ChunkData
	//	*NetGameMessage_ChunkBatchRequest
	//	*NetGameMessage_ChunkBlockDelta
	//	*NetGameMessage_SubscribeBlockUpdates
	//	*NetGameMessage_UnsubscribeBlockUpdates
	//	*NetGameMessage_BlockUpdateRequest
	//	*NetGameMessage_BlockUpdateResponse
	//	*NetGameMessage_BlockUpdate
	//	*NetGameMessage_BlockEvent
	//	*NetGameMessage_EntitySpawn
	//	*NetGameMessage_EntityMove
	//	*NetGameMessage_EntityDespawn
	//	*NetGameMessage_EntityActionRequest
	//	*NetGameMessage_EntityActionResponse
	//	*NetGameMessage_Chat
	//	*NetGameMessage_ChatBroadcast
	//	*NetGameMessage_Ping
	//	*NetGameMessage_Pong
	//	*NetGameMessage_AckMessage
	//	*NetGameMessage_Heartbeat
	//	*NetGameMessage_Connection
	//	*NetGameMessage_WorldEvent
	//	*NetGameMessage_ClientInput
	//	*NetGameMessage_WorldSnapshot
	//	*NetGameMessage_InputAck
	//	*NetGameMessage_PredictionStats
	Payload       isNetGameMessage_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetGameMessage) Reset() {
	*x = NetGameMessage{}
	mi := &file_network_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetGameMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetGameMessage) ProtoMessage() {}

func (x *NetGameMessage) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetGameMessage.ProtoReflect.Descriptor instead.
func (*NetGameMessage) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{0}
}

func (x *NetGameMessage) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *NetGameMessage) GetAck() uint32 {
	if x != nil {
		return x.Ack
	}
	return 0
}

func (x *NetGameMessage) GetAckBits() uint32 {
	if x != nil {
		return x.AckBits
	}
	return 0
}

func (x *NetGameMessage) GetFlags() NetFlags {
	if x != nil {
		return x.Flags
	}
	return NetFlags_UNRELIABLE_UNORDERED
}

func (x *NetGameMessage) GetCompression() CompressionType {
	if x != nil {
		return x.Compression
	}
	return CompressionType_NONE
}

func (x *NetGameMessage) GetPayload() isNetGameMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *NetGameMessage) GetAuthRequest() *AuthMessage {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_AuthRequest); ok {
			return x.AuthRequest
		}
	}
	return nil
}

func (x *NetGameMessage) GetAuthResponse() *AuthResponseMessage {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_AuthResponse); ok {
			return x.AuthResponse
		}
	}
	return nil
}

func (x *NetGameMessage) GetChunkRequest() *ChunkRequest {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_ChunkRequest); ok {
			return x.ChunkRequest
		}
	}
	return nil
}

func (x *NetGameMessage) GetChunkData() *ChunkData {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_ChunkData); ok {
			return x.ChunkData
		}
	}
	return nil
}

func (x *NetGameMessage) GetChunkBatchRequest() *ChunkBatchRequest {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_ChunkBatchRequest); ok {
			return x.ChunkBatchRequest
		}
	}
	return nil
}

func (x *NetGameMessage) GetChunkBlockDelta() *ChunkBlockDelta {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_ChunkBlockDelta); ok {
			return x.ChunkBlockDelta
		}
	}
	return nil
}

func (x *NetGameMessage) GetSubscribeBlockUpdates() *SubscribeBlockUpdates {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_SubscribeBlockUpdates); ok {
			return x.SubscribeBlockUpdates
		}
	}
	return nil
}

func (x *NetGameMessage) GetUnsubscribeBlockUpdates() *UnsubscribeBlockUpdates {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_UnsubscribeBlockUpdates); ok {
			return x.UnsubscribeBlockUpdates
		}
	}
	return nil
}

func (x *NetGameMessage) GetBlockUpdateRequest() *BlockUpdateRequest {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_BlockUpdateRequest); ok {
			return x.BlockUpdateRequest
		}
	}
	return nil
}

func (x *NetGameMessage) GetBlockUpdateResponse() *BlockUpdateResponseMessage {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_BlockUpdateResponse); ok {
			return x.BlockUpdateResponse
		}
	}
	return nil
}

func (x *NetGameMessage) GetBlockUpdate() *BlockUpdateMessage {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_BlockUpdate); ok {
			return x.BlockUpdate
		}
	}
	return nil
}

func (x *NetGameMessage) GetBlockEvent() *BlockEventMessage {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_BlockEvent); ok {
			return x.BlockEvent
		}
	}
	return nil
}

func (x *NetGameMessage) GetEntitySpawn() *EntitySpawnMessage {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_EntitySpawn); ok {
			return x.EntitySpawn
		}
	}
	return nil
}

func (x *NetGameMessage) GetEntityMove() *EntityMoveMessage {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_EntityMove); ok {
			return x.EntityMove
		}
	}
	return nil
}

func (x *NetGameMessage) GetEntityDespawn() *EntityDespawnMessage {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_EntityDespawn); ok {
			return x.EntityDespawn
		}
	}
	return nil
}

func (x *NetGameMessage) GetEntityActionRequest() *EntityActionRequest {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_EntityActionRequest); ok {
			return x.EntityActionRequest
		}
	}
	return nil
}

func (x *NetGameMessage) GetEntityActionResponse() *EntityActionResponse {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_EntityActionResponse); ok {
			return x.EntityActionResponse
		}
	}
	return nil
}

func (x *NetGameMessage) GetChat() *ChatMessage {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_Chat); ok {
			return x.Chat
		}
	}
	return nil
}

func (x *NetGameMessage) GetChatBroadcast() *ChatBroadcastMessage {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_ChatBroadcast); ok {
			return x.ChatBroadcast
		}
	}
	return nil
}

func (x *NetGameMessage) GetPing() *PingMessage {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_Ping); ok {
			return x.Ping
		}
	}
	return nil
}

func (x *NetGameMessage) GetPong() *PongMessage {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_Pong); ok {
			return x.Pong
		}
	}
	return nil
}

func (x *NetGameMessage) GetAckMessage() *AckMessage {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_AckMessage); ok {
			return x.AckMessage
		}
	}
	return nil
}

func (x *NetGameMessage) GetHeartbeat() *HeartbeatMessage {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_Heartbeat); ok {
			return x.Heartbeat
		}
	}
	return nil
}

func (x *NetGameMessage) GetConnection() *ConnectionMessage {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_Connection); ok {
			return x.Connection
		}
	}
	return nil
}

func (x *NetGameMessage) GetWorldEvent() *WorldEventMessage {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_WorldEvent); ok {
			return x.WorldEvent
		}
	}
	return nil
}

func (x *NetGameMessage) GetClientInput() *ClientInputMessage {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_ClientInput); ok {
			return x.ClientInput
		}
	}
	return nil
}

func (x *NetGameMessage) GetWorldSnapshot() *WorldSnapshotMessage {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_WorldSnapshot); ok {
			return x.WorldSnapshot
		}
	}
	return nil
}

func (x *NetGameMessage) GetInputAck() *InputAckMessage {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_InputAck); ok {
			return x.InputAck
		}
	}
	return nil
}

func (x *NetGameMessage) GetPredictionStats() *PredictionStatsMessage {
	if x != nil {
		if x, ok := x.Payload.(*NetGameMessage_PredictionStats); ok {
			return x.PredictionStats
		}
	}
	return nil
}

type isNetGameMessage_Payload interface {
	isNetGameMessage_Payload()
}

type NetGameMessage_AuthRequest struct {
	// Auth messages
	AuthRequest *AuthMessage `protobuf:"bytes,10,opt,name=auth_request,json=authRequest,proto3,oneof"`
}

type NetGameMessage_AuthResponse struct {
	AuthResponse *AuthResponseMessage `protobuf:"bytes,11,opt,name=auth_response,json=authResponse,proto3,oneof"`
}

type NetGameMessage_ChunkRequest struct {
	// Chunk messages
	ChunkRequest *ChunkRequest `protobuf:"bytes,12,opt,name=chunk_request,json=chunkRequest,proto3,oneof"`
}

type NetGameMessage_ChunkData struct {
	ChunkData *ChunkData `protobuf:"bytes,13,opt,name=chunk_data,json=chunkData,proto3,oneof"`
}

type NetGameMessage_ChunkBatchRequest struct {
	ChunkBatchRequest *ChunkBatchRequest `protobuf:"bytes,14,opt,name=chunk_batch_request,json=chunkBatchRequest,proto3,oneof"`
}

type NetGameMessage_ChunkBlockDelta struct {
	ChunkBlockDelta *ChunkBlockDelta `protobuf:"bytes,15,opt,name=chunk_block_delta,json=chunkBlockDelta,proto3,oneof"`
}

type NetGameMessage_SubscribeBlockUpdates struct {
	SubscribeBlockUpdates *SubscribeBlockUpdates `protobuf:"bytes,16,opt,name=subscribe_block_updates,json=subscribeBlockUpdates,proto3,oneof"`
}

type NetGameMessage_UnsubscribeBlockUpdates struct {
	UnsubscribeBlockUpdates *UnsubscribeBlockUpdates `protobuf:"bytes,17,opt,name=unsubscribe_block_updates,json=unsubscribeBlockUpdates,proto3,oneof"`
}

type NetGameMessage_BlockUpdateRequest struct {
	// Block messages
	BlockUpdateRequest *BlockUpdateRequest `protobuf:"bytes,18,opt,name=block_update_request,json=blockUpdateRequest,proto3,oneof"`
}

type NetGameMessage_BlockUpdateResponse struct {
	BlockUpdateResponse *BlockUpdateResponseMessage `protobuf:"bytes,19,opt,name=block_update_response,json=blockUpdateResponse,proto3,oneof"`
}

type NetGameMessage_BlockUpdate struct {
	BlockUpdate *BlockUpdateMessage `protobuf:"bytes,20,opt,name=block_update,json=blockUpdate,proto3,oneof"`
}

type NetGameMessage_BlockEvent struct {
	BlockEvent *BlockEventMessage `protobuf:"bytes,21,opt,name=block_event,json=blockEvent,proto3,oneof"`
}

type NetGameMessage_EntitySpawn struct {
	// Entity messages
	EntitySpawn *EntitySpawnMessage `protobuf:"bytes,22,opt,name=entity_spawn,json=entitySpawn,proto3,oneof"`
}

type NetGameMessage_EntityMove struct {
	EntityMove *EntityMoveMessage `protobuf:"bytes,23,opt,name=entity_move,json=entityMove,proto3,oneof"`
}

type NetGameMessage_EntityDespawn struct {
	EntityDespawn *EntityDespawnMessage `protobuf:"bytes,24,opt,name=entity_despawn,json=entityDespawn,proto3,oneof"`
}

type NetGameMessage_EntityActionRequest struct {
	EntityActionRequest *EntityActionRequest `protobuf:"bytes,25,opt,name=entity_action_request,json=entityActionRequest,proto3,oneof"`
}

type NetGameMessage_EntityActionResponse struct {
	EntityActionResponse *EntityActionResponse `protobuf:"bytes,26,opt,name=entity_action_response,json=entityActionResponse,proto3,oneof"`
}

type NetGameMessage_Chat struct {
	// Chat messages
	Chat *ChatMessage `protobuf:"bytes,27,opt,name=chat,proto3,oneof"`
}

type NetGameMessage_ChatBroadcast struct {
	ChatBroadcast *ChatBroadcastMessage `protobuf:"bytes,28,opt,name=chat_broadcast,json=chatBroadcast,proto3,oneof"`
}

type NetGameMessage_Ping struct {
	// Ping messages
	Ping *PingMessage `protobuf:"bytes,29,opt,name=ping,proto3,oneof"`
}

type NetGameMessage_Pong struct {
	Pong *PongMessage `protobuf:"bytes,30,opt,name=pong,proto3,oneof"`
}

type NetGameMessage_AckMessage struct {
	// Network-level messages
	AckMessage *AckMessage `protobuf:"bytes,31,opt,name=ack_message,json=ackMessage,proto3,oneof"`
}

type NetGameMessage_Heartbeat struct {
	Heartbeat *HeartbeatMessage `protobuf:"bytes,32,opt,name=heartbeat,proto3,oneof"`
}

type NetGameMessage_Connection struct {
	Connection *ConnectionMessage `protobuf:"bytes,33,opt,name=connection,proto3,oneof"`
}

type NetGameMessage_WorldEvent struct {
	// World events
	WorldEvent *WorldEventMessage `protobuf:"bytes,34,opt,name=world_event,json=worldEvent,proto3,oneof"`
}

type NetGameMessage_ClientInput struct {
	// Client-side prediction messages
	ClientInput *ClientInputMessage `protobuf:"bytes,35,opt,name=client_input,json=clientInput,proto3,oneof"`
}

type NetGameMessage_WorldSnapshot struct {
	WorldSnapshot *WorldSnapshotMessage `protobuf:"bytes,36,opt,name=world_snapshot,json=worldSnapshot,proto3,oneof"`
}

type NetGameMessage_InputAck struct {
	InputAck *InputAckMessage `protobuf:"bytes,37,opt,name=input_ack,json=inputAck,proto3,oneof"`
}

type NetGameMessage_PredictionStats struct {
	PredictionStats *PredictionStatsMessage `protobuf:"bytes,38,opt,name=prediction_stats,json=predictionStats,proto3,oneof"`
}

func (*NetGameMessage_AuthRequest) isNetGameMessage_Payload() {}

func (*NetGameMessage_AuthResponse) isNetGameMessage_Payload() {}

func (*NetGameMessage_ChunkRequest) isNetGameMessage_Payload() {}

func (*NetGameMessage_ChunkData) isNetGameMessage_Payload() {}

func (*NetGameMessage_ChunkBatchRequest) isNetGameMessage_Payload() {}

func (*NetGameMessage_ChunkBlockDelta) isNetGameMessage_Payload() {}

func (*NetGameMessage_SubscribeBlockUpdates) isNetGameMessage_Payload() {}

func (*NetGameMessage_UnsubscribeBlockUpdates) isNetGameMessage_Payload() {}

func (*NetGameMessage_BlockUpdateRequest) isNetGameMessage_Payload() {}

func (*NetGameMessage_BlockUpdateResponse) isNetGameMessage_Payload() {}

func (*NetGameMessage_BlockUpdate) isNetGameMessage_Payload() {}

func (*NetGameMessage_BlockEvent) isNetGameMessage_Payload() {}

func (*NetGameMessage_EntitySpawn) isNetGameMessage_Payload() {}

func (*NetGameMessage_EntityMove) isNetGameMessage_Payload() {}

func (*NetGameMessage_EntityDespawn) isNetGameMessage_Payload() {}

func (*NetGameMessage_EntityActionRequest) isNetGameMessage_Payload() {}

func (*NetGameMessage_EntityActionResponse) isNetGameMessage_Payload() {}

func (*NetGameMessage_Chat) isNetGameMessage_Payload() {}

func (*NetGameMessage_ChatBroadcast) isNetGameMessage_Payload() {}

func (*NetGameMessage_Ping) isNetGameMessage_Payload() {}

func (*NetGameMessage_Pong) isNetGameMessage_Payload() {}

func (*NetGameMessage_AckMessage) isNetGameMessage_Payload() {}

func (*NetGameMessage_Heartbeat) isNetGameMessage_Payload() {}

func (*NetGameMessage_Connection) isNetGameMessage_Payload() {}

func (*NetGameMessage_WorldEvent) isNetGameMessage_Payload() {}

func (*NetGameMessage_ClientInput) isNetGameMessage_Payload() {}

func (*NetGameMessage_WorldSnapshot) isNetGameMessage_Payload() {}

func (*NetGameMessage_InputAck) isNetGameMessage_Payload() {}

func (*NetGameMessage_PredictionStats) isNetGameMessage_Payload() {}

// AckMessage для подтверждения доставки
type AckMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sequence      uint32                 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`                             // подтверждённый пакет
	ReceivedBits  uint32                 `protobuf:"varint,2,opt,name=received_bits,json=receivedBits,proto3" json:"received_bits,omitempty"` // битовая маска последних 32 пакетов
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckMessage) Reset() {
	*x = AckMessage{}
	mi := &file_network_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckMessage) ProtoMessage() {}

func (x *AckMessage) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckMessage.ProtoReflect.Descriptor instead.
func (*AckMessage) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{1}
}

func (x *AckMessage) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *AckMessage) GetReceivedBits() uint32 {
	if x != nil {
		return x.ReceivedBits
	}
	return 0
}

// HeartbeatMessage для измерения RTT и keep-alive
type HeartbeatMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientTime    int64                  `protobuf:"varint,1,opt,name=client_time,json=clientTime,proto3" json:"client_time,omitempty"`
	ServerTime    int64                  `protobuf:"varint,2,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	RttMs         int32                  `protobuf:"varint,3,opt,name=rtt_ms,json=rttMs,proto3" json:"rtt_ms,omitempty"` // Round-trip time в миллисекундах
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatMessage) Reset() {
	*x = HeartbeatMessage{}
	mi := &file_network_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatMessage) ProtoMessage() {}

func (x *HeartbeatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatMessage.ProtoReflect.Descriptor instead.
func (*HeartbeatMessage) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{2}
}

func (x *HeartbeatMessage) GetClientTime() int64 {
	if x != nil {
		return x.ClientTime
	}
	return 0
}

func (x *HeartbeatMessage) GetServerTime() int64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

func (x *HeartbeatMessage) GetRttMs() int32 {
	if x != nil {
		return x.RttMs
	}
	return 0
}

// ConnectionMessage для handshake/disconnect
type ConnectionMessage struct {
	state           protoimpl.MessageState     `protogen:"open.v1"`
	Type            ConnectionMessage_ConnType `protobuf:"varint,1,opt,name=type,proto3,enum=protocol.ConnectionMessage_ConnType" json:"type,omitempty"`
	ProtocolVersion uint32                     `protobuf:"varint,2,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	Reason          string                     `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Metadata        map[string]string          `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ConnectionMessage) Reset() {
	*x = ConnectionMessage{}
	mi := &file_network_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionMessage) ProtoMessage() {}

func (x *ConnectionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionMessage.ProtoReflect.Descriptor instead.
func (*ConnectionMessage) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{3}
}

func (x *ConnectionMessage) GetType() ConnectionMessage_ConnType {
	if x != nil {
		return x.Type
	}
	return ConnectionMessage_CONNECT
}

func (x *ConnectionMessage) GetProtocolVersion() uint32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *ConnectionMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ConnectionMessage) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// WorldEventMessage для игровых событий
type WorldEventMessage struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	EventType       string                 `protobuf:"bytes,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Position        *Vec2                  `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Metadata        *JsonMetadata          `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	AffectedPlayers []uint64               `protobuf:"varint,4,rep,packed,name=affected_players,json=affectedPlayers,proto3" json:"affected_players,omitempty"` // Кто должен получить это событие
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *WorldEventMessage) Reset() {
	*x = WorldEventMessage{}
	mi := &file_network_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorldEventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldEventMessage) ProtoMessage() {}

func (x *WorldEventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldEventMessage.ProtoReflect.Descriptor instead.
func (*WorldEventMessage) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{4}
}

func (x *WorldEventMessage) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *WorldEventMessage) GetPosition() *Vec2 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *WorldEventMessage) GetMetadata() *JsonMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *WorldEventMessage) GetAffectedPlayers() []uint64 {
	if x != nil {
		return x.AffectedPlayers
	}
	return nil
}

var File_network_proto protoreflect.FileDescriptor

const file_network_proto_rawDesc = "" +
	"\n" +
	"\rnetwork.proto\x12\bprotocol\x1a\n" +
	"auth.proto\x1a\vchunk.proto\x1a\vblock.proto\x1a\fentity.proto\x1a\n" +
	"chat.proto\x1a\n" +
	"ping.proto\x1a\fcommon.proto\x1a\x10prediction.proto\"\x99\x11\n" +
	"\x0eNetGameMessage\x12\x1a\n" +
	"\bsequence\x18\x01 \x01(\rR\bsequence\x12\x10\n" +
	"\x03ack\x18\x02 \x01(\rR\x03ack\x12\x19\n" +
	"\back_bits\x18\x03 \x01(\rR\aackBits\x12(\n" +
	"\x05flags\x18\x04 \x01(\x0e2\x12.protocol.NetFlagsR\x05flags\x12;\n" +
	"\vcompression\x18\x05 \x01(\x0e2\x19.protocol.CompressionTypeR\vcompression\x12:\n" +
	"\fauth_request\x18\n" +
	" \x01(\v2\x15.protocol.AuthMessageH\x00R\vauthRequest\x12D\n" +
	"\rauth_response\x18\v \x01(\v2\x1d.protocol.AuthResponseMessageH\x00R\fauthResponse\x12=\n" +
	"\rchunk_request\x18\f \x01(\v2\x16.protocol.ChunkRequestH\x00R\fchunkRequest\x124\n" +
	"\n" +
	"chunk_data\x18\r \x01(\v2\x13.protocol.ChunkDataH\x00R\tchunkData\x12M\n" +
	"\x13chunk_batch_request\x18\x0e \x01(\v2\x1b.protocol.ChunkBatchRequestH\x00R\x11chunkBatchRequest\x12G\n" +
	"\x11chunk_block_delta\x18\x0f \x01(\v2\x19.protocol.ChunkBlockDeltaH\x00R\x0fchunkBlockDelta\x12Y\n" +
	"\x17subscribe_block_updates\x18\x10 \x01(\v2\x1f.protocol.SubscribeBlockUpdatesH\x00R\x15subscribeBlockUpdates\x12_\n" +
	"\x19unsubscribe_block_updates\x18\x11 \x01(\v2!.protocol.UnsubscribeBlockUpdatesH\x00R\x17unsubscribeBlockUpdates\x12P\n" +
	"\x14block_update_request\x18\x12 \x01(\v2\x1c.protocol.BlockUpdateRequestH\x00R\x12blockUpdateRequest\x12Z\n" +
	"\x15block_update_response\x18\x13 \x01(\v2$.protocol.BlockUpdateResponseMessageH\x00R\x13blockUpdateResponse\x12A\n" +
	"\fblock_update\x18\x14 \x01(\v2\x1c.protocol.BlockUpdateMessageH\x00R\vblockUpdate\x12>\n" +
	"\vblock_event\x18\x15 \x01(\v2\x1b.protocol.BlockEventMessageH\x00R\n" +
	"blockEvent\x12A\n" +
	"\fentity_spawn\x18\x16 \x01(\v2\x1c.protocol.EntitySpawnMessageH\x00R\ventitySpawn\x12>\n" +
	"\ventity_move\x18\x17 \x01(\v2\x1b.protocol.EntityMoveMessageH\x00R\n" +
	"entityMove\x12G\n" +
	"\x0eentity_despawn\x18\x18 \x01(\v2\x1e.protocol.EntityDespawnMessageH\x00R\rentityDespawn\x12S\n" +
	"\x15entity_action_request\x18\x19 \x01(\v2\x1d.protocol.EntityActionRequestH\x00R\x13entityActionRequest\x12V\n" +
	"\x16entity_action_response\x18\x1a \x01(\v2\x1e.protocol.EntityActionResponseH\x00R\x14entityActionResponse\x12+\n" +
	"\x04chat\x18\x1b \x01(\v2\x15.protocol.ChatMessageH\x00R\x04chat\x12G\n" +
	"\x0echat_broadcast\x18\x1c \x01(\v2\x1e.protocol.ChatBroadcastMessageH\x00R\rchatBroadcast\x12+\n" +
	"\x04ping\x18\x1d \x01(\v2\x15.protocol.PingMessageH\x00R\x04ping\x12+\n" +
	"\x04pong\x18\x1e \x01(\v2\x15.protocol.PongMessageH\x00R\x04pong\x127\n" +
	"\vack_message\x18\x1f \x01(\v2\x14.protocol.AckMessageH\x00R\n" +
	"ackMessage\x12:\n" +
	"\theartbeat\x18  \x01(\v2\x1a.protocol.HeartbeatMessageH\x00R\theartbeat\x12=\n" +
	"\n" +
	"connection\x18! \x01(\v2\x1b.protocol.ConnectionMessageH\x00R\n" +
	"connection\x12>\n" +
	"\vworld_event\x18\" \x01(\v2\x1b.protocol.WorldEventMessageH\x00R\n" +
	"worldEvent\x12A\n" +
	"\fclient_input\x18# \x01(\v2\x1c.protocol.ClientInputMessageH\x00R\vclientInput\x12G\n" +
	"\x0eworld_snapshot\x18$ \x01(\v2\x1e.protocol.WorldSnapshotMessageH\x00R\rworldSnapshot\x128\n" +
	"\tinput_ack\x18% \x01(\v2\x19.protocol.InputAckMessageH\x00R\binputAck\x12M\n" +
	"\x10prediction_stats\x18& \x01(\v2 .protocol.PredictionStatsMessageH\x00R\x0fpredictionStatsB\t\n" +
	"\apayload\"M\n" +
	"\n" +
	"AckMessage\x12\x1a\n" +
	"\bsequence\x18\x01 \x01(\rR\bsequence\x12#\n" +
	"\rreceived_bits\x18\x02 \x01(\rR\freceivedBits\"k\n" +
	"\x10HeartbeatMessage\x12\x1f\n" +
	"\vclient_time\x18\x01 \x01(\x03R\n" +
	"clientTime\x12\x1f\n" +
	"\vserver_time\x18\x02 \x01(\x03R\n" +
	"serverTime\x12\x15\n" +
	"\x06rtt_ms\x18\x03 \x01(\x05R\x05rttMs\"\xd5\x02\n" +
	"\x11ConnectionMessage\x128\n" +
	"\x04type\x18\x01 \x01(\x0e2$.protocol.ConnectionMessage.ConnTypeR\x04type\x12)\n" +
	"\x10protocol_version\x18\x02 \x01(\rR\x0fprotocolVersion\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\tR\x06reason\x12E\n" +
	"\bmetadata\x18\x04 \x03(\v2).protocol.ConnectionMessage.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"?\n" +
	"\bConnType\x12\v\n" +
	"\aCONNECT\x10\x00\x12\n" +
	"\n" +
	"\x06ACCEPT\x10\x01\x12\n" +
	"\n" +
	"\x06REJECT\x10\x02\x12\x0e\n" +
	"\n" +
	"DISCONNECT\x10\x03\"\xbd\x01\n" +
	"\x11WorldEventMessage\x12\x1d\n" +
	"\n" +
	"event_type\x18\x01 \x01(\tR\teventType\x12*\n" +
	"\bposition\x18\x02 \x01(\v2\x0e.protocol.Vec2R\bposition\x122\n" +
	"\bmetadata\x18\x03 \x01(\v2\x16.protocol.JsonMetadataR\bmetadata\x12)\n" +
	"\x10affected_players\x18\x04 \x03(\x04R\x0faffectedPlayers*%\n" +
	"\x0fCompressionType\x12\b\n" +
	"\x04NONE\x10\x00\x12\b\n" +
	"\x04ZSTD\x10\x01*R\n" +
	"\bNetFlags\x12\x18\n" +
	"\x14UNRELIABLE_UNORDERED\x10\x00\x12\x14\n" +
	"\x10RELIABLE_ORDERED\x10\x01\x12\x16\n" +
	"\x12RELIABLE_UNORDERED\x10\x02B.Z,github.com/annel0/mmo-game/internal/protocolb\x06proto3"

var (
	file_network_proto_rawDescOnce sync.Once
	file_network_proto_rawDescData []byte
)

func file_network_proto_rawDescGZIP() []byte {
	file_network_proto_rawDescOnce.Do(func() {
		file_network_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_network_proto_rawDesc), len(file_network_proto_rawDesc)))
	})
	return file_network_proto_rawDescData
}

var file_network_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_network_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_network_proto_goTypes = []any{
	(CompressionType)(0),               // 0: protocol.CompressionType
	(NetFlags)(0),                      // 1: protocol.NetFlags
	(ConnectionMessage_ConnType)(0),    // 2: protocol.ConnectionMessage.ConnType
	(*NetGameMessage)(nil),             // 3: protocol.NetGameMessage
	(*AckMessage)(nil),                 // 4: protocol.AckMessage
	(*HeartbeatMessage)(nil),           // 5: protocol.HeartbeatMessage
	(*ConnectionMessage)(nil),          // 6: protocol.ConnectionMessage
	(*WorldEventMessage)(nil),          // 7: protocol.WorldEventMessage
	nil,                                // 8: protocol.ConnectionMessage.MetadataEntry
	(*AuthMessage)(nil),                // 9: protocol.AuthMessage
	(*AuthResponseMessage)(nil),        // 10: protocol.AuthResponseMessage
	(*ChunkRequest)(nil),               // 11: protocol.ChunkRequest
	(*ChunkData)(nil),                  // 12: protocol.ChunkData
	(*ChunkBatchRequest)(nil),          // 13: protocol.ChunkBatchRequest
	(*ChunkBlockDelta)(nil),            // 14: protocol.ChunkBlockDelta
	(*SubscribeBlockUpdates)(nil),      // 15: protocol.SubscribeBlockUpdates
	(*UnsubscribeBlockUpdates)(nil),    // 16: protocol.UnsubscribeBlockUpdates
	(*BlockUpdateRequest)(nil),         // 17: protocol.BlockUpdateRequest
	(*BlockUpdateResponseMessage)(nil), // 18: protocol.BlockUpdateResponseMessage
	(*BlockUpdateMessage)(nil),         // 19: protocol.BlockUpdateMessage
	(*BlockEventMessage)(nil),          // 20: protocol.BlockEventMessage
	(*EntitySpawnMessage)(nil),         // 21: protocol.EntitySpawnMessage
	(*EntityMoveMessage)(nil),          // 22: protocol.EntityMoveMessage
	(*EntityDespawnMessage)(nil),       // 23: protocol.EntityDespawnMessage
	(*EntityActionRequest)(nil),        // 24: protocol.EntityActionRequest
	(*EntityActionResponse)(nil),       // 25: protocol.EntityActionResponse
	(*ChatMessage)(nil),                // 26: protocol.ChatMessage
	(*ChatBroadcastMessage)(nil),       // 27: protocol.ChatBroadcastMessage
	(*PingMessage)(nil),                // 28: protocol.PingMessage
	(*PongMessage)(nil),                // 29: protocol.PongMessage
	(*ClientInputMessage)(nil),         // 30: protocol.ClientInputMessage
	(*WorldSnapshotMessage)(nil),       // 31: protocol.WorldSnapshotMessage
	(*InputAckMessage)(nil),            // 32: protocol.InputAckMessage
	(*PredictionStatsMessage)(nil),     // 33: protocol.PredictionStatsMessage
	(*Vec2)(nil),                       // 34: protocol.Vec2
	(*JsonMetadata)(nil),               // 35: protocol.JsonMetadata
}
var file_network_proto_depIdxs = []int32{
	1,  // 0: protocol.NetGameMessage.flags:type_name -> protocol.NetFlags
	0,  // 1: protocol.NetGameMessage.compression:type_name -> protocol.CompressionType
	9,  // 2: protocol.NetGameMessage.auth_request:type_name -> protocol.AuthMessage
	10, // 3: protocol.NetGameMessage.auth_response:type_name -> protocol.AuthResponseMessage
	11, // 4: protocol.NetGameMessage.chunk_request:type_name -> protocol.ChunkRequest
	12, // 5: protocol.NetGameMessage.chunk_data:type_name -> protocol.ChunkData
	13, // 6: protocol.NetGameMessage.chunk_batch_request:type_name -> protocol.ChunkBatchRequest
	14, // 7: protocol.NetGameMessage.chunk_block_delta:type_name -> protocol.ChunkBlockDelta
	15, // 8: protocol.NetGameMessage.subscribe_block_updates:type_name -> protocol.SubscribeBlockUpdates
	16, // 9: protocol.NetGameMessage.unsubscribe_block_updates:type_name -> protocol.UnsubscribeBlockUpdates
	17, // 10: protocol.NetGameMessage.block_update_request:type_name -> protocol.BlockUpdateRequest
	18, // 11: protocol.NetGameMessage.block_update_response:type_name -> protocol.BlockUpdateResponseMessage
	19, // 12: protocol.NetGameMessage.block_update:type_name -> protocol.BlockUpdateMessage
	20, // 13: protocol.NetGameMessage.block_event:type_name -> protocol.BlockEventMessage
	21, // 14: protocol.NetGameMessage.entity_spawn:type_name -> protocol.EntitySpawnMessage
	22, // 15: protocol.NetGameMessage.entity_move:type_name -> protocol.EntityMoveMessage
	23, // 16: protocol.NetGameMessage.entity_despawn:type_name -> protocol.EntityDespawnMessage
	24, // 17: protocol.NetGameMessage.entity_action_request:type_name -> protocol.EntityActionRequest
	25, // 18: protocol.NetGameMessage.entity_action_response:type_name -> protocol.EntityActionResponse
	26, // 19: protocol.NetGameMessage.chat:type_name -> protocol.ChatMessage
	27, // 20: protocol.NetGameMessage.chat_broadcast:type_name -> protocol.ChatBroadcastMessage
	28, // 21: protocol.NetGameMessage.ping:type_name -> protocol.PingMessage
	29, // 22: protocol.NetGameMessage.pong:type_name -> protocol.PongMessage
	4,  // 23: protocol.NetGameMessage.ack_message:type_name -> protocol.AckMessage
	5,  // 24: protocol.NetGameMessage.heartbeat:type_name -> protocol.HeartbeatMessage
	6,  // 25: protocol.NetGameMessage.connection:type_name -> protocol.ConnectionMessage
	7,  // 26: protocol.NetGameMessage.world_event:type_name -> protocol.WorldEventMessage
	30, // 27: protocol.NetGameMessage.client_input:type_name -> protocol.ClientInputMessage
	31, // 28: protocol.NetGameMessage.world_snapshot:type_name -> protocol.WorldSnapshotMessage
	32, // 29: protocol.NetGameMessage.input_ack:type_name -> protocol.InputAckMessage
	33, // 30: protocol.NetGameMessage.prediction_stats:type_name -> protocol.PredictionStatsMessage
	2,  // 31: protocol.ConnectionMessage.type:type_name -> protocol.ConnectionMessage.ConnType
	8,  // 32: protocol.ConnectionMessage.metadata:type_name -> protocol.ConnectionMessage.MetadataEntry
	34, // 33: protocol.WorldEventMessage.position:type_name -> protocol.Vec2
	35, // 34: protocol.WorldEventMessage.metadata:type_name -> protocol.JsonMetadata
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_network_proto_init() }
func file_network_proto_init() {
	if File_network_proto != nil {
		return
	}
	file_auth_proto_init()
	file_chunk_proto_init()
	file_block_proto_init()
	file_entity_proto_init()
	file_chat_proto_init()
	file_ping_proto_init()
	file_common_proto_init()
	file_prediction_proto_init()
	file_network_proto_msgTypes[0].OneofWrappers = []any{
		(*NetGameMessage_AuthRequest)(nil),
		(*NetGameMessage_AuthResponse)(nil),
		(*NetGameMessage_ChunkRequest)(nil),
		(*NetGameMessage_ChunkData)(nil),
		(*NetGameMessage_ChunkBatchRequest)(nil),
		(*NetGameMessage_ChunkBlockDelta)(nil),
		(*NetGameMessage_SubscribeBlockUpdates)(nil),
		(*NetGameMessage_UnsubscribeBlockUpdates)(nil),
		(*NetGameMessage_BlockUpdateRequest)(nil),
		(*NetGameMessage_BlockUpdateResponse)(nil),
		(*NetGameMessage_BlockUpdate)(nil),
		(*NetGameMessage_BlockEvent)(nil),
		(*NetGameMessage_EntitySpawn)(nil),
		(*NetGameMessage_EntityMove)(nil),
		(*NetGameMessage_EntityDespawn)(nil),
		(*NetGameMessage_EntityActionRequest)(nil),
		(*NetGameMessage_EntityActionResponse)(nil),
		(*NetGameMessage_Chat)(nil),
		(*NetGameMessage_ChatBroadcast)(nil),
		(*NetGameMessage_Ping)(nil),
		(*NetGameMessage_Pong)(nil),
		(*NetGameMessage_AckMessage)(nil),
		(*NetGameMessage_Heartbeat)(nil),
		(*NetGameMessage_Connection)(nil),
		(*NetGameMessage_WorldEvent)(nil),
		(*NetGameMessage_ClientInput)(nil),
		(*NetGameMessage_WorldSnapshot)(nil),
		(*NetGameMessage_InputAck)(nil),
		(*NetGameMessage_PredictionStats)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_network_proto_rawDesc), len(file_network_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_network_proto_goTypes,
		DependencyIndexes: file_network_proto_depIdxs,
		EnumInfos:         file_network_proto_enumTypes,
		MessageInfos:      file_network_proto_msgTypes,
	}.Build()
	File_network_proto = out.File
	file_network_proto_goTypes = nil
	file_network_proto_depIdxs = nil
}
