package regional

import (
	"context"
	"encoding/json"
	"fmt"
	"sync"
	"time"

	"github.com/annel0/mmo-game/internal/eventbus"
	"github.com/annel0/mmo-game/internal/logging"
	syncpkg "github.com/annel0/mmo-game/internal/sync"
	"github.com/annel0/mmo-game/internal/world"
	"github.com/prometheus/client_golang/prometheus"
)

// NodeMetrics —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–∑–ª–∞
type NodeMetrics struct {
	LocalChanges      prometheus.Counter
	RemoteChanges     prometheus.Counter
	ConflictsResolved prometheus.Counter
	ReplicationLag    prometheus.Gauge
}

// NewNodeMetrics —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–∑–ª–∞
func NewNodeMetrics() *NodeMetrics {
	return &NodeMetrics{
		LocalChanges: prometheus.NewCounter(prometheus.CounterOpts{
			Name: "regional_node_local_changes_total",
			Help: "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π",
		}),
		RemoteChanges: prometheus.NewCounter(prometheus.CounterOpts{
			Name: "regional_node_remote_changes_total",
			Help: "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π",
		}),
		ConflictsResolved: prometheus.NewCounter(prometheus.CounterOpts{
			Name: "regional_node_conflicts_resolved_total",
			Help: "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤",
		}),
		ReplicationLag: prometheus.NewGauge(prometheus.GaugeOpts{
			Name: "regional_node_replication_lag_ms",
			Help: "–ó–∞–¥–µ—Ä–∂–∫–∞ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö",
		}),
	}
}

// WorldWrapper –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ world.WorldManager –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —É–∑–ª–æ–≤
type WorldWrapper struct {
	manager *world.WorldManager
}

// ChangeData –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
type ChangeData struct {
	Type     string                 `json:"type"`
	Position map[string]interface{} `json:"position,omitempty"`
	Data     map[string]interface{} `json:"data,omitempty"`
}

// NewWorldWrapper —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –æ–±—ë—Ä—Ç–∫—É –º–∏—Ä–∞
func NewWorldWrapper(manager *world.WorldManager) *WorldWrapper {
	return &WorldWrapper{manager: manager}
}

// ApplyChange –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫ –º–∏—Ä—É
func (w *WorldWrapper) ApplyChange(change *syncpkg.Change) error {
	logging.Debug("WorldWrapper: –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è %d –±–∞–π—Ç", len(change.Data))

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
	changeData, err := w.decodeChangeData(change.Data)
	if err != nil {
		return fmt.Errorf("failed to decode change data: %w", err)
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
	switch changeData.Type {
	case "block_place":
		return w.applyBlockPlace(changeData)
	case "block_break":
		return w.applyBlockBreak(changeData)
	case "entity_move":
		return w.applyEntityMove(changeData)
	case "chunk_load":
		return w.applyChunkLoad(changeData)
	default:
		logging.Warn("WorldWrapper: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è: %s", changeData.Type)
		return nil // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã
	}
}

// decodeChangeData –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ –±–∞–π—Ç–æ–≤
func (w *WorldWrapper) decodeChangeData(data []byte) (*ChangeData, error) {
	var changeData ChangeData
	if err := json.Unmarshal(data, &changeData); err != nil {
		return nil, fmt.Errorf("failed to unmarshal change data: %w", err)
	}
	return &changeData, nil
}

// applyBlockPlace –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –±–ª–æ–∫–∞
func (w *WorldWrapper) applyBlockPlace(changeData *ChangeData) error {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
	x, ok := changeData.Position["x"].(float64)
	if !ok {
		return fmt.Errorf("invalid x coordinate")
	}
	y, ok := changeData.Position["y"].(float64)
	if !ok {
		return fmt.Errorf("invalid y coordinate")
	}
	z, ok := changeData.Position["z"].(float64)
	if !ok {
		return fmt.Errorf("invalid z coordinate")
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –±–ª–æ–∫–∞
	blockType, ok := changeData.Data["block_type"].(string)
	if !ok {
		return fmt.Errorf("invalid block_type")
	}

	logging.Debug("WorldWrapper: —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –±–ª–æ–∫–∞ %s –≤ (%d,%d,%d)", blockType, int(x), int(y), int(z))

	// –ü—Ä–∏–º–µ–Ω—è–µ–º —á–µ—Ä–µ–∑ WorldManager (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	// –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–æ–≤ WorldManager
	return nil
}

// applyBlockBreak –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –±–ª–æ–∫–∞
func (w *WorldWrapper) applyBlockBreak(changeData *ChangeData) error {
	x, ok := changeData.Position["x"].(float64)
	if !ok {
		return fmt.Errorf("invalid x coordinate")
	}
	y, ok := changeData.Position["y"].(float64)
	if !ok {
		return fmt.Errorf("invalid y coordinate")
	}
	z, ok := changeData.Position["z"].(float64)
	if !ok {
		return fmt.Errorf("invalid z coordinate")
	}

	logging.Debug("WorldWrapper: —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –±–ª–æ–∫–∞ –≤ (%d,%d,%d)", int(x), int(y), int(z))
	return nil
}

// applyEntityMove –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏
func (w *WorldWrapper) applyEntityMove(changeData *ChangeData) error {
	entityID, ok := changeData.Data["entity_id"].(string)
	if !ok {
		return fmt.Errorf("invalid entity_id")
	}

	x, ok := changeData.Position["x"].(float64)
	if !ok {
		return fmt.Errorf("invalid x coordinate")
	}
	y, ok := changeData.Position["y"].(float64)
	if !ok {
		return fmt.Errorf("invalid y coordinate")
	}

	logging.Debug("WorldWrapper: –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ %s –≤ (%.2f,%.2f)", entityID, x, y)
	return nil
}

// applyChunkLoad –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —á–∞–Ω–∫–∞
func (w *WorldWrapper) applyChunkLoad(changeData *ChangeData) error {
	chunkX, ok := changeData.Position["chunk_x"].(float64)
	if !ok {
		return fmt.Errorf("invalid chunk_x")
	}
	chunkY, ok := changeData.Position["chunk_y"].(float64)
	if !ok {
		return fmt.Errorf("invalid chunk_y")
	}

	logging.Debug("WorldWrapper: –∑–∞–≥—Ä—É–∑–∫–∞ —á–∞–Ω–∫–∞ (%d,%d)", int(chunkX), int(chunkY))
	return nil
}

// RegionalNode –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —É–∑–µ–ª —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –º–∏—Ä–∞
// –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ä–µ–≥–∏–æ–Ω–∞–º–∏.
type RegionalNode interface {
	GetRegionID() string
	GetLocalWorld() *WorldWrapper
	// –ü—Ä–∏–º–µ–Ω–∏—Ç—å —É–¥–∞–ª—ë–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
	ApplyRemoteChange(change *syncpkg.Change) error
	// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã
	BroadcastLocalChange(change *syncpkg.Change) error
	Start(ctx context.Context) error
	Stop() error
	GetMetrics() *NodeMetrics
}

// RegionalNodeImpl —Ä–µ–∞–ª–∏–∑—É–µ—Ç RegionalNode
type RegionalNodeImpl struct {
	mu         sync.RWMutex
	regionID   string
	localWorld *WorldWrapper
	resolver   ConflictResolver
	metrics    *NodeMetrics

	// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å sync —Å–∏—Å—Ç–µ–º–æ–π
	eventBus     eventbus.EventBus
	batchManager *syncpkg.BatchManager
	subscription eventbus.Subscription

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
	ctx    context.Context
	cancel context.CancelFunc
	wg     sync.WaitGroup
}

type NodeConfig struct {
	RegionID     string
	WorldManager *world.WorldManager
	EventBus     eventbus.EventBus
	BatchManager *syncpkg.BatchManager
	Resolver     ConflictResolver
}

func NewRegionalNode(cfg NodeConfig) (*RegionalNodeImpl, error) {
	if cfg.RegionID == "" {
		return nil, fmt.Errorf("region_id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}
	if cfg.WorldManager == nil {
		return nil, fmt.Errorf("world_manager –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
	}
	if cfg.EventBus == nil {
		return nil, fmt.Errorf("event_bus –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
	}
	if cfg.BatchManager == nil {
		return nil, fmt.Errorf("batch_manager –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
	}

	resolver := cfg.Resolver
	if resolver == nil {
		resolver = NewLWWResolver()
	}

	node := &RegionalNodeImpl{
		regionID:     cfg.RegionID,
		localWorld:   NewWorldWrapper(cfg.WorldManager),
		resolver:     resolver,
		metrics:      NewNodeMetrics(),
		eventBus:     cfg.EventBus,
		batchManager: cfg.BatchManager,
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Prometheus –º–µ—Ç—Ä–∏–∫–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
	collectors := []prometheus.Collector{
		node.metrics.LocalChanges,
		node.metrics.RemoteChanges,
		node.metrics.ConflictsResolved,
		node.metrics.ReplicationLag,
	}

	for _, collector := range collectors {
		if err := prometheus.Register(collector); err != nil {
			// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫
			if _, ok := err.(prometheus.AlreadyRegisteredError); !ok {
				logging.Warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫—É: %v", err)
			}
		}
	}

	return node, nil
}

func (n *RegionalNodeImpl) GetRegionID() string {
	return n.regionID
}

func (n *RegionalNodeImpl) GetLocalWorld() *WorldWrapper {
	n.mu.RLock()
	defer n.mu.RUnlock()
	return n.localWorld
}

func (n *RegionalNodeImpl) ApplyRemoteChange(change *syncpkg.Change) error {
	n.mu.Lock()
	defer n.mu.Unlock()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –ø–æ–∫–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
	if n.hasConflict(change) {
		conflict := &Conflict{
			RemoteChange: change,
			DetectedAt:   time.Now(),
		}

		resolved, err := n.resolver.Resolve(conflict)
		if err != nil {
			logging.Warn("üîÑ Regional[%s]: –æ—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞: %v", n.regionID, err)
			return fmt.Errorf("conflict resolution failed: %w", err)
		}

		if resolved == nil {
			logging.Debug("üîÑ Regional[%s]: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞", n.regionID)
			return nil
		}

		change = resolved
		n.metrics.ConflictsResolved.Inc()
		logging.Debug("üîÑ Regional[%s]: –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω", n.regionID)
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –º–∏—Ä—É
	err := n.localWorld.ApplyChange(change)
	if err != nil {
		logging.Warn("üîÑ Regional[%s]: –æ—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: %v", n.regionID, err)
		return fmt.Errorf("failed to apply change: %w", err)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
	n.metrics.RemoteChanges.Inc()
	replicationLag := time.Since(change.Timestamp).Milliseconds()
	n.metrics.ReplicationLag.Set(float64(replicationLag))

	logging.Debug("üîÑ Regional[%s]: –ø—Ä–∏–º–µ–Ω–µ–Ω–æ —É–¥–∞–ª—ë–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ, lag=%dms",
		n.regionID, replicationLag)

	return nil
}

func (n *RegionalNodeImpl) BroadcastLocalChange(change *syncpkg.Change) error {
	n.mu.Lock()
	defer n.mu.Unlock()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
	change.SourceRegion = n.regionID
	change.Timestamp = time.Now()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ BatchManager
	n.batchManager.AddChange(*change)

	n.metrics.LocalChanges.Inc()
	logging.Debug("üîÑ Regional[%s]: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ", n.regionID)

	return nil
}

func (n *RegionalNodeImpl) Start(ctx context.Context) error {
	n.mu.Lock()
	defer n.mu.Unlock()

	if n.ctx != nil {
		return fmt.Errorf("node already started")
	}

	n.ctx, n.cancel = context.WithCancel(ctx)

	// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ SyncBatch —Å–æ–±—ã—Ç–∏—è
	sub, err := n.eventBus.Subscribe(n.ctx, eventbus.Filter{
		Types: []string{"SyncBatch"},
	}, n.handleSyncBatch)
	if err != nil {
		n.cancel()
		return fmt.Errorf("failed to subscribe to SyncBatch: %w", err)
	}
	n.subscription = sub

	logging.Info("üîÑ Regional[%s]: —É–∑–µ–ª –∑–∞–ø—É—â–µ–Ω", n.regionID)
	return nil
}

func (n *RegionalNodeImpl) Stop() error {
	n.mu.Lock()
	defer n.mu.Unlock()

	if n.cancel != nil {
		n.cancel()
	}

	if n.subscription != nil {
		n.subscription.Unsubscribe()
	}

	n.wg.Wait()

	logging.Info("üîÑ Regional[%s]: —É–∑–µ–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", n.regionID)
	return nil
}

func (n *RegionalNodeImpl) GetMetrics() *NodeMetrics {
	return n.metrics
}

// hasConflict –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
func (n *RegionalNodeImpl) hasConflict(change *syncpkg.Change) bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –∏ —Ç–∏–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è

	// –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ (–±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç), —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–º
	if time.Since(change.Timestamp) > 5*time.Minute {
		logging.Debug("üîÑ Regional[%s]: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ: %v", n.regionID, change.Timestamp)
		return true
	}

	// –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑ –±—É–¥—É—â–µ–≥–æ (–±–æ–ª—å—à–µ 1 –º–∏–Ω—É—Ç—ã), —Ç–æ–∂–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç
	if change.Timestamp.After(time.Now().Add(1 * time.Minute)) {
		logging.Debug("üîÑ Regional[%s]: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑ –±—É–¥—É—â–µ–≥–æ: %v", n.regionID, change.Timestamp)
		return true
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–æ —Ç–∏–ø—É –∏–∑–º–µ–Ω–µ–Ω–∏—è
	changeData, err := n.parseChangeForConflict(change.Data)
	if err != nil {
		logging.Warn("üîÑ Regional[%s]: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞: %v", n.regionID, err)
		return false // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–∞—Ä—Å–∏—Ç—å, –Ω–µ —Å—á–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–º
	}

	// –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–ª–æ–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
	if changeData.Type == "block_place" || changeData.Type == "block_break" {
		return n.hasBlockConflict(changeData, change.Timestamp)
	}

	// –î–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—é
	if changeData.Type == "entity_move" {
		return n.hasEntityConflict(changeData, change.Timestamp)
	}

	// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –Ω–µ—Ç
	return false
}

// parseChangeForConflict –ø–∞—Ä—Å–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
func (n *RegionalNodeImpl) parseChangeForConflict(data []byte) (*ChangeData, error) {
	var changeData ChangeData
	if err := json.Unmarshal(data, &changeData); err != nil {
		return nil, fmt.Errorf("failed to unmarshal change data: %w", err)
	}
	return &changeData, nil
}

// hasBlockConflict –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–ª–æ–∫–æ–≤
func (n *RegionalNodeImpl) hasBlockConflict(changeData *ChangeData, timestamp time.Time) bool {
	// –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞:
	// - –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Ä–∞–∑–Ω—ã–º–∏ —Ä–µ–≥–∏–æ–Ω–∞–º–∏
	// - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–ª–æ–∫–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –º–∏—Ä–µ
	// - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏

	// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: —Å—á–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–º –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –º–µ–Ω—å—à–µ —Å–µ–∫—É–Ω–¥—ã –Ω–∞–∑–∞–¥
	// –∏ –∫–∞—Å–∞–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–∫–æ–ª–æ —Å–ø–∞–≤–Ω–∞)
	if x, ok := changeData.Position["x"].(float64); ok {
		if y, ok := changeData.Position["y"].(float64); ok {
			// –°–ø–∞–≤–Ω –≤ (0,0) - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–æ–Ω–∞
			if int(x) == 0 && int(y) == 0 && time.Since(timestamp) < time.Second {
				logging.Debug("üîÑ Regional[%s]: –∫–æ–Ω—Ñ–ª–∏–∫—Ç –±–ª–æ–∫–∞ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –∑–æ–Ω–µ (0,0)", n.regionID)
				return true
			}
		}
	}

	return false
}

// hasEntityConflict –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π
func (n *RegionalNodeImpl) hasEntityConflict(changeData *ChangeData, timestamp time.Time) bool {
	// –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞:
	// - –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –Ω–∞ –±–æ–ª—å—à–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
	// - –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
	// - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π —Å –¥—Ä—É–≥–∏–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏

	// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—é
	if x, ok := changeData.Position["x"].(float64); ok {
		if y, ok := changeData.Position["y"].(float64); ok {
			// –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è
			if x > 10000 || y > 10000 || x < -10000 || y < -10000 {
				logging.Debug("üîÑ Regional[%s]: –≤–æ–∑–º–æ–∂–Ω–∞—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ –≤ (%.2f,%.2f)", n.regionID, x, y)
				return true
			}
		}
	}

	return false
}

// handleSyncBatch –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ SyncBatch —Å–æ–±—ã—Ç–∏—è
func (n *RegionalNodeImpl) handleSyncBatch(ctx context.Context, envelope *eventbus.Envelope) {
	// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	if envelope.Source == n.regionID {
		return
	}

	n.wg.Add(1)
	defer n.wg.Done()

	logging.Debug("üîÑ Regional[%s]: –ø–æ–ª—É—á–µ–Ω SyncBatch –æ—Ç %s, —Ä–∞–∑–º–µ—Ä=%d –±–∞–π—Ç",
		n.regionID, envelope.Source, len(envelope.Payload))

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º SyncBatch
	changes := n.decodeSyncBatch(envelope.Payload)

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
	for _, change := range changes {
		if err := n.ApplyRemoteChange(&change); err != nil {
			logging.Warn("üîÑ Regional[%s]: –æ—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: %v", n.regionID, err)
		}
	}
}

// decodeSyncBatch –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç SyncBatch –∏–∑ –±–∞–π—Ç–æ–≤
func (n *RegionalNodeImpl) decodeSyncBatch(payload []byte) []syncpkg.Change {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º DeltaCompressor –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–∞–∫ –≤ SyncConsumer)
	compressor := syncpkg.NewPassthroughCompressor()

	changes, err := compressor.Decompress(payload)
	if err != nil {
		logging.Warn("üîÑ Regional[%s]: –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è SyncBatch: %v", n.regionID, err)
		return []syncpkg.Change{}
	}

	logging.Debug("üîÑ Regional[%s]: –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ %d –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ SyncBatch", n.regionID, len(changes))
	return changes
}
