package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
)

// WebhookEvent —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è webhook —Å–æ–±—ã—Ç–∏–π
type WebhookEvent struct {
	EventType   string                 `json:"event_type"`
	Timestamp   int64                  `json:"timestamp"`
	ServerID    string                 `json:"server_id"`
	Data        map[string]interface{} `json:"data"`
	Source      string                 `json:"source"`
	Environment string                 `json:"environment"`
}

func main() {
	log.Println("üîó –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Webhook –ø—Ä–∏–µ–º–Ω–∏–∫–∞...")

	gin.SetMode(gin.ReleaseMode)
	r := gin.Default()

	// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	r.Use(gin.LoggerWithFormatter(func(param gin.LogFormatterParams) string {
		return fmt.Sprintf("%s - [%s] \"%s %s %s %d %s \"%s\" %s\"\n",
			param.ClientIP,
			param.TimeStamp.Format(time.RFC3339),
			param.Method,
			param.Path,
			param.Request.Proto,
			param.StatusCode,
			param.Latency,
			param.Request.UserAgent(),
			param.ErrorMessage,
		)
	}))

	// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
	r.GET("/", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{
			"message":     "Webhook –ø—Ä–∏–µ–º–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω",
			"endpoints":   []string{"/webhook", "/webhooks/anticheat", "/webhooks/server", "/webhooks/player"},
			"server_time": time.Now().Unix(),
		})
	})

	// –û—Å–Ω–æ–≤–Ω–æ–π webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç
	r.POST("/webhook", handleWebhook)

	// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
	r.POST("/webhooks/anticheat", handleAnticheatWebhook)
	r.POST("/webhooks/server", handleServerWebhook)
	r.POST("/webhooks/player", handlePlayerWebhook)

	log.Println("‚úÖ Webhook –ø—Ä–∏–µ–º–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000")
	log.Println("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
	log.Println("   GET  /                      - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ")
	log.Println("   POST /webhook               - –û—Å–Ω–æ–≤–Ω–æ–π webhook")
	log.Println("   POST /webhooks/anticheat    - –ê–Ω—Ç–∏—á–∏—Ç —Å–æ–±—ã—Ç–∏—è")
	log.Println("   POST /webhooks/server       - –°–µ—Ä–≤–µ—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è")
	log.Println("   POST /webhooks/player       - –ò–≥—Ä–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è")

	if err := r.Run(":3000"); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}

// handleWebhook –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–µ webhook —Å–æ–±—ã—Ç–∏—è
func handleWebhook(c *gin.Context) {
	var event WebhookEvent

	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
	body, err := io.ReadAll(c.Request.Body)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"})
		return
	}

	// –ü–∞—Ä—Å–∏–º JSON
	if err := json.Unmarshal(body, &event); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π JSON"})
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	log.Printf("üìß –ü–æ–ª—É—á–µ–Ω webhook:")
	log.Printf("   Event Type: %s", event.EventType)
	log.Printf("   Server ID: %s", event.ServerID)
	log.Printf("   Timestamp: %d (%s)", event.Timestamp, time.Unix(event.Timestamp, 0).Format("15:04:05"))
	log.Printf("   Headers:")
	for key, values := range c.Request.Header {
		for _, value := range values {
			log.Printf("     %s: %s", key, value)
		}
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
	switch event.EventType {
	case "server.started":
		log.Printf("–°–µ—Ä–≤–µ—Ä %s –∑–∞–ø—É—â–µ–Ω!", event.ServerID)
	case "server.stopped":
		log.Printf("‚èπÔ∏è  –°–µ—Ä–≤–µ—Ä %s –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", event.ServerID)
	case "server.error":
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ %s: %v", event.ServerID, event.Data["error"])
	case "server.high_cpu":
		cpu := event.Data["cpu_percent"]
		log.Printf("‚ö†Ô∏è  –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ %s: %v%%", event.ServerID, cpu)
	case "server.low_tps":
		tps := event.Data["tps"]
		log.Printf("‚ö†Ô∏è  –ù–∏–∑–∫–∏–π TPS –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ %s: %v", event.ServerID, tps)
	case "player.joined":
		player := event.Data["username"]
		log.Printf("üë§ –ò–≥—Ä–æ–∫ %v –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É %s", player, event.ServerID)
	case "player.left":
		player := event.Data["username"]
		log.Printf("üëã –ò–≥—Ä–æ–∫ %v –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä %s", player, event.ServerID)
	case "anticheat.violation":
		player := event.Data["username"]
		violation := event.Data["violation_type"]
		log.Printf("üö® –ê–ù–¢–ò–ß–ò–¢: –ò–≥—Ä–æ–∫ %v –Ω–∞—Ä—É—à–∏–ª –ø—Ä–∞–≤–∏–ª–∞ (%v) –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ %s", player, violation, event.ServerID)
	case "webhook.test":
		log.Printf("üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç webhook ID %v", event.Data["webhook_id"])
	default:
		log.Printf("‚ÑπÔ∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: %s", event.EventType)
	}

	// –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
	if len(event.Data) > 0 {
		log.Printf("   –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:")
		for key, value := range event.Data {
			log.Printf("     %s: %v", key, value)
		}
	}

	c.JSON(http.StatusOK, gin.H{
		"status":      "received",
		"event_type":  event.EventType,
		"received_at": time.Now().Unix(),
	})
}

// handleAnticheatWebhook —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω—Ç–∏—á–∏—Ç–∞
func handleAnticheatWebhook(c *gin.Context) {
	var event WebhookEvent
	if err := c.ShouldBindJSON(&event); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π JSON"})
		return
	}

	log.Printf("üõ°Ô∏è  –ê–ù–¢–ò–ß–ò–¢ –°–û–ë–´–¢–ò–ï: %s", event.EventType)

	if event.EventType == "anticheat.violation" {
		player := event.Data["username"]
		violation := event.Data["violation_type"]
		severity := event.Data["severity"]

		log.Printf("üö® –ù–ê–†–£–®–ï–ù–ò–ï –ê–ù–¢–ò–ß–ò–¢–ê:")
		log.Printf("   –ò–≥—Ä–æ–∫: %v", player)
		log.Printf("   –¢–∏–ø: %v", violation)
		log.Printf("   –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: %v", severity)
		log.Printf("   –°–µ—Ä–≤–µ—Ä: %s", event.ServerID)

		// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è:
		// - –û—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord/Telegram
		// - –ó–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
		// - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–∞–Ω–∞
	}

	c.JSON(http.StatusOK, gin.H{"status": "processed"})
}

// handleServerWebhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
func handleServerWebhook(c *gin.Context) {
	var event WebhookEvent
	if err := c.ShouldBindJSON(&event); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π JSON"})
		return
	}

	log.Printf("üñ•Ô∏è  –°–ï–†–í–ï–†–ù–û–ï –°–û–ë–´–¢–ò–ï: %s", event.EventType)

	switch event.EventType {
	case "server.high_cpu", "server.high_memory":
		// –ê–ª–µ—Ä—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
		log.Printf("‚ö†Ô∏è  –ú–û–ù–ò–¢–û–†–ò–ù–ì: –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ %s", event.ServerID)
	case "server.error":
		// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
		log.Printf("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ %s", event.ServerID)
	}

	c.JSON(http.StatusOK, gin.H{"status": "processed"})
}

// handlePlayerWebhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
func handlePlayerWebhook(c *gin.Context) {
	var event WebhookEvent
	if err := c.ShouldBindJSON(&event); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π JSON"})
		return
	}

	log.Printf("üéÆ –ò–ì–†–û–í–û–ï –°–û–ë–´–¢–ò–ï: %s", event.EventType)

	c.JSON(http.StatusOK, gin.H{"status": "processed"})
}
