package main

import (
	"encoding/binary"
	"fmt"
	"log"
	"net"
	"time"

	"github.com/annel0/mmo-game/internal/protocol"
)

func main() {
	fmt.Println("=== –¢–ï–°–¢–û–í–´–ô –ö–õ–ò–ï–ù–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ü–†–û–¢–û–ö–û–õ–ê ===")

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
	conn, err := net.Dial("tcp", "localhost:7777")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
	}
	defer conn.Close()

	fmt.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É")

	serializer := protocol.NewMessageSerializer()

	// –¢–µ—Å—Ç 1: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
	fmt.Println("\n=== –¢–ï–°–¢ 1: –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ===")
	testAuth(conn, serializer)

	// –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å —á–∞–Ω–∫–∞
	fmt.Println("\n=== –¢–ï–°–¢ 2: –ó–ê–ü–†–û–° –ß–ê–ù–ö–ê ===")
	testChunkRequest(conn, serializer)

	// –¢–µ—Å—Ç 3: UDP —Å–æ–æ–±—â–µ–Ω–∏—è
	fmt.Println("\n=== –¢–ï–°–¢ 3: UDP –°–û–û–ë–©–ï–ù–ò–Ø ===")
	testUDP()

	fmt.Println("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===")
	time.Sleep(2 * time.Second)
}

func testAuth(conn net.Conn, serializer *protocol.MessageSerializer) {
	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	password := "ChangeMe123!"
	authReq := &protocol.AuthRequest{
		Username: "admin",
		Password: &password,
	}

	// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º
	data, err := serializer.SerializeMessage(protocol.MessageType_AUTH, authReq)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AUTH: %v", err)
		return
	}

	fmt.Printf("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ AUTH —Å–æ–æ–±—â–µ–Ω–∏—è (%d –±–∞–π—Ç)\n", len(data))
	logHexDump("AUTH REQUEST", data)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏–Ω—É + –¥–∞–Ω–Ω—ã–µ
	header := make([]byte, 4)
	binary.BigEndian.PutUint32(header, uint32(len(data)))

	conn.Write(header)
	conn.Write(data)

	// –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
	responseHeader := make([]byte, 4)
	_, err = conn.Read(responseHeader)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞: %v", err)
		return
	}

	responseSize := binary.BigEndian.Uint32(responseHeader)
	responseData := make([]byte, responseSize)
	_, err = conn.Read(responseData)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
		return
	}

	fmt.Printf("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç AUTH (%d –±–∞–π—Ç)\n", len(responseData))
	logHexDump("AUTH RESPONSE", responseData)

	// –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç
	msg, err := serializer.DeserializeMessage(responseData)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: %v", err)
		return
	}

	authResp := &protocol.AuthResponse{}
	if err := serializer.DeserializePayload(msg, authResp); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AuthResponse: %v", err)
		return
	}

	if authResp.Success {
		fmt.Printf("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! PlayerID: %d\n", authResp.PlayerId)
	} else {
		fmt.Printf("‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞: %s\n", authResp.Message)
	}
}

func testChunkRequest(conn net.Conn, serializer *protocol.MessageSerializer) {
	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–∞–Ω–∫–∞
	chunkReq := &protocol.ChunkRequest{
		ChunkX: 0,
		ChunkY: 0,
	}

	// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º
	data, err := serializer.SerializeMessage(protocol.MessageType_CHUNK_REQUEST, chunkReq)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CHUNK_REQUEST: %v", err)
		return
	}

	fmt.Printf("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ CHUNK_REQUEST (%d –±–∞–π—Ç)\n", len(data))
	logHexDump("CHUNK_REQUEST", data)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏–Ω—É + –¥–∞–Ω–Ω—ã–µ
	header := make([]byte, 4)
	binary.BigEndian.PutUint32(header, uint32(len(data)))

	conn.Write(header)
	conn.Write(data)

	// –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
	responseHeader := make([]byte, 4)
	conn.SetReadDeadline(time.Now().Add(5 * time.Second))
	_, err = conn.Read(responseHeader)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–∞–Ω–∫–∞: %v", err)
		return
	}

	responseSize := binary.BigEndian.Uint32(responseHeader)
	responseData := make([]byte, responseSize)
	_, err = conn.Read(responseData)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —á–∞–Ω–∫–∞: %v", err)
		return
	}

	fmt.Printf("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç CHUNK_DATA (%d –±–∞–π—Ç)\n", len(responseData))
	logHexDump("CHUNK_DATA", responseData[:min(len(responseData), 200)]) // –ü–µ—Ä–≤—ã–µ 200 –±–∞–π—Ç

	// –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç
	msg, err := serializer.DeserializeMessage(responseData)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–∞–Ω–∫–∞: %v", err)
		return
	}

	chunkData := &protocol.ChunkData{}
	if err := serializer.DeserializePayload(msg, chunkData); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChunkData: %v", err)
		return
	}

	fmt.Printf("‚úÖ –ü–æ–ª—É—á–µ–Ω —á–∞–Ω–∫ (%d,%d) —Å %d —Å—Ç—Ä–æ–∫–∞–º–∏ –±–ª–æ–∫–æ–≤\n",
		chunkData.ChunkX, chunkData.ChunkY, len(chunkData.Blocks))
}

func testUDP() {
	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø–æ UDP
	conn, err := net.Dial("udp", "localhost:7778")
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ UDP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
		return
	}
	defer conn.Close()

	fmt.Println("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ UDP —Å–µ—Ä–≤–µ—Ä—É")

	serializer := protocol.NewMessageSerializer()

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–≤–∏–∂–µ–Ω–∏–∏
	moveMsg := &protocol.EntityMoveMessage{
		Entities: []*protocol.EntityData{
			{
				Id:       1,
				Position: &protocol.Vec2{X: 10, Y: 20},
				Velocity: &protocol.Vec2Float{X: 1.5, Y: 2.5},
				Type:     protocol.EntityType_ENTITY_PLAYER,
				Active:   true,
			},
		},
	}

	// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º
	data, err := serializer.SerializeMessage(protocol.MessageType_ENTITY_MOVE, moveMsg)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ENTITY_MOVE: %v", err)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç —Å playerID –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
	playerID := uint64(1)
	header := make([]byte, 8)
	binary.BigEndian.PutUint64(header, playerID)
	packet := append(header, data...)

	fmt.Printf("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ UDP ENTITY_MOVE (%d –±–∞–π—Ç)\n", len(packet))
	logHexDump("UDP ENTITY_MOVE", packet)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
	_, err = conn.Write(packet)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ UDP: %v", err)
		return
	}

	fmt.Println("‚úÖ UDP —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
}

func logHexDump(title string, data []byte) {
	fmt.Printf("=== %s HEX DUMP ===\n", title)
	const bytesPerLine = 16
	for i := 0; i < len(data); i += bytesPerLine {
		end := i + bytesPerLine
		if end > len(data) {
			end = len(data)
		}

		// Offset
		fmt.Printf("%08x: ", i)

		// Hex bytes
		for j := i; j < end; j++ {
			fmt.Printf("%02x ", data[j])
		}

		// –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
		for j := end; j < i+bytesPerLine; j++ {
			fmt.Printf("   ")
		}

		// ASCII
		fmt.Printf(" |")
		for j := i; j < end; j++ {
			if data[j] >= 32 && data[j] < 127 {
				fmt.Printf("%c", data[j])
			} else {
				fmt.Printf(".")
			}
		}
		fmt.Printf("|\n")
	}
	fmt.Println()
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
